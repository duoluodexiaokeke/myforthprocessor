/*
 * @(#)Activator.java	1.116 02/10/24
 *
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package sun.plugin.resources;

import java.util.ListResourceBundle;
import java.awt.event.KeyEvent;
/**
 * US English verison of Activator strings.
 *
 * @author Graham Hamilton
 */

public class Activator extends ListResourceBundle {

    public Object[][] getContents() {
	return contents;
    }

    static final Object[][] contents = {
	{ "panel.caption", "Java(TM) Plug-in Control Panel" },
	{ "product_name", "Java(TM) Plug-in" },
	{ "version", "Version" },
	{ "default_vm_version", "Default Virtual Machine Version " },
	{ "using_jre_version", "Using JRE version" },
	{ "user_home_dir", "User home directory" },
	{ "user_overriden_browser", "User has overriden browser's proxy settings." },
	{ "proxy_configuration", "Proxy Configuration: " },
	{ "browser_config", "Browser Proxy Configuration" },
	{ "auto_config", "Automatic Proxy Configuration" },
	{ "manual_config", "Manual Configuration" },
	{ "no_proxy", "No proxy" },
	{ "proxy_is", "Proxy: " },
	{ "proxy_override_is", "Proxy Overrides: " },
	{ "loading", "Loading {0} ..." },
	{ "java_applet", "Java Applet" },
        { "failed", "Loading Java Applet Failed..." },
        { "image_failed", "Failed to create user-defined image.  Check image file name." },
	{ "java_bean", "JavaBeans" },
	{ "java_not_enabled", "Java is not enabled" },
        { "exception", "Exception: {0}" },
	{ "net.connect.no_proxy", "Connecting {0} with no proxy" },
	{ "net.connect.proxy_is", "Connecting {0} with proxy={1}" },

	{ "bean_code_and_ser", "Bean cannot have both CODE and JAVA_OBJECT defined " },
	{ "status_applet", "Applet {0} {1}" },

	// Resources associated with SecurityManager print Dialog:
	{ "print.caption", "Confirmation Needed - Print" },
	{ "print.message", new String[]{
		"<html><b>Print Request</b></html>Applet would like to print. Do you want to proceed?"}},
	{ "print.checkBox", "Don't show this dialog box again" },
	{ "print.buttonYes", "Yes" },
	{ "print.buttonYes.acceleratorKey", new Integer(KeyEvent.VK_Y)},
	{ "print.buttonNo", "No" },
	{ "print.buttonNo.acceleratorKey", new Integer(KeyEvent.VK_N)},

	{ "https_dialog.caption", "Warning - HTTPS" },
	{ "https_dialog.text", "<html><b>Hostname Mismatch</b></html>The hostname in the server security certificate does not match the name of the server."
			     + "\n\nHostname of the URL: {0}"
			     + "\nHostname from the certificate: {1}"
			     + "\n\nDo you want to proceed?" },
	{ "https_dialog.unknown.host", "Unknown host" },

	{ "security_dialog.caption", "Warning - Security" },
	{ "security_dialog.text0", "Do you want to trust the signed applet distributed by \"{0}\"?"
				 + "\n\nPublisher authenticity verified by: \"{1}\"" },
	{ "security_dialog_https.text0", "Do you want to accept the certificate from web site \"{0}\" for the purpose of exchanging encrypted information?"
				 + "\n\nPublisher authenticity verified by: \"{1}\"" },
	{ "security_dialog.text1", "\nCaution: \"{0}\" asserts that this content is safe. You should only accept this content if you trust \"{1}\" to make that assertion." },
	{ "security_dialog.unknown.issuer", "Unknown issuer" },
	{ "security_dialog.unknown.subject", "Unknown subject" },
	{ "security_dialog.certShowName", "{0} ({1})" },
	{ "security_dialog.rootCANotValid", "The security certificate was issued by a company that is not trusted." },
	{ "security_dialog.rootCAValid", "The security certificate was issued by a company that is trusted." },
	{ "security_dialog.timeNotValid", "The security certificate has expired or is not yet valid." },
	{ "security_dialog.timeValid", "The security certificate has not expired and is still valid." },
	{ "security_dialog.buttonAlways", "Always" },
        { "security_dialog.buttonAlways.acceleratorKey", new Integer(KeyEvent.VK_A)},
	{ "security_dialog.buttonYes", "Yes" },
	{ "security_dialog.buttonYes.acceleratorKey", new Integer(KeyEvent.VK_Y)},
        { "security_dialog.buttonNo", "No" },
	{ "security_dialog.buttonNo.acceleratorKey", new Integer(KeyEvent.VK_N)},
        { "security_dialog.buttonViewCert", "More Details" },
        { "security_dialog.buttonViewCert.acceleratorKey", new Integer(KeyEvent.VK_M)},

	{ "cert_dialog.caption", "Details - Certificate" },
	{ "cert_dialog.certpath", "Certificate Path" },
	{ "cert_dialog.field.Version", "Version" },
	{ "cert_dialog.field.SerialNumber", "Serial Number" },
	{ "cert_dialog.field.SignatureAlg", "Signature Algorithm" },
	{ "cert_dialog.field.Issuer", "Issuer" },
	{ "cert_dialog.field.EffectiveDate", "Effective Date" },
	{ "cert_dialog.field.ExpirationDate", "Expiration Date" },
	{ "cert_dialog.field.Validity", "Validity" },
	{ "cert_dialog.field.Subject", "Subject" },
	{ "cert_dialog.field.Signature", "Signature" },
	{ "cert_dialog.field", "Field" },
	{ "cert_dialog.value", "Value" },

        { "cert_dialog.close", "Close" },
	{ "cert_dialog.close.acceleratorKey", new Integer(KeyEvent.VK_C) },

	{ "net.authenticate.caption", "Password Needed - Networking"},
	{ "net.authenticate.label", "<html><b>Enter your username and password:</b></html>"},
	{ "net.authenticate.resource", "Resource:" },
	{ "net.authenticate.username", "User name:" },
	{ "net.authenticate.password", "Password:" },
	{ "net.authenticate.firewall", "Firewall:" },
	{ "net.authenticate.realm", "Realm:" },
	{ "net.authenticate.scheme", "Scheme:" },
	{ "net.authenticate.unknownSite", "Unknown Site" },

        { "console.caption", "Java Console" },
        { "console.clear", "Clear" },
        { "console.clear.acceleratorKey", new Integer(KeyEvent.VK_C)},
        { "console.close", "Close" },
        { "console.close.acceleratorKey", new Integer(KeyEvent.VK_E) },
        { "console.copy", "Copy" },
        { "console.copy.acceleratorKey", new Integer(KeyEvent.VK_Y) },

	{ "optpkg.cert_expired", "<html><b>Certificate Expired</b></html>Optional package installation is aborted.\n" },
	{ "optpkg.cert_notyieldvalid", "<html><b>Certificate Not Valid</b></html>Optional package installation is aborted.\n" },
	{ "optpkg.cert_notverify", "<html><b>Certificate Not Verified</b></html>Optional package installation is aborted.\n" },
	{ "optpkg.general_error", "<html><b>General Exception</b></html>Optional package installation is aborted.\n" },
	{ "optpkg.caption", "Warning - Optional Package" },
	{ "optpkg.installer.launch.wait", "<html><b>Installating Optional Package</b></html>Click OK to continue applet loading after optional package installer exits.\n" },
	{ "optpkg.installer.launch.caption", "Installation in Progress - Optional Package"},
	{ "optpkg.prompt_user.new_spec.text", "<html><b>Download Request</b></html>The applet requires a newer version (specification {0}) of optional package \"{1}\" from {2}\n\nDo you want to continue?" },
	{ "optpkg.prompt_user.new_impl.text", "<html><b>Download Request</b></html>The applet requires a newer version (implementation {0}) of optional package \"{1}\" from {2}\n\nDo you want to continue?" },
	{ "optpkg.prompt_user.new_vendor.text", "<html><b>Download Request</b></html>The applet requires the ({0}) of optional package \"{1}\" {2} from {3}\n\nDo you want to continue?" },
	{ "optpkg.prompt_user.default.text", "<html><b>Download Request</b></html>The applet requires the installation of optional package \"{0}\" from {1}\n\nDo you want to continue?" },

	{ "rsa.cert_expired", "<html><b>Certificate Expired</b></html>Code will be treated as unsigned.\n" },
	{ "rsa.cert_notyieldvalid", "<html><b>Certificate Not Valid</b></html>Code will be treated as unsigned.\n" },
	{ "rsa.general_error", "<html><b>Certificate Not Verified</b></html>Code will be treated as unsigned.\n" },

	{ "usability.confirmDialogTitle", "Confirmation Needed - Java" },
	{ "usability.inputDialogTitle", "Information Needed - Java" },
	{ "usability.messageDialogTitle", "Message - Java" },
	{ "usability.exceptionDialogTitle", "Error - Java" },
	{ "usability.optionDialogTitle", "Option - Java" },
	{ "usability.aboutDialogTitle", "About - Java" },
	{ "usability.confirm.yes", "Yes" },
        { "usability.confirm.yes.acceleratorKey", new Integer(KeyEvent.VK_Y)},
        { "usability.confirm.no", "No" },
        { "usability.confirm.no.acceleratorKey", new Integer(KeyEvent.VK_N)},
        { "usability.moreInfo", "More Details" },
        { "usability.moreInfo.acceleratorKey", new Integer(KeyEvent.VK_M)},
        { "usability.lessInfo", "Less Details" },
        { "usability.lessInfo.acceleratorKey", new Integer(KeyEvent.VK_L)},
	{ "usability.java.home.link", "http://www.java.com" },
	{ "usability.general_error", "<html><b>General Exception</b></html>" },
	{ "usability.net_error", "<html><b>Networking Exception</b></html>" },
	{ "usability.security_error", "<html><b>Security Exception</b></html>" },
	{ "usability.ext_error", "<html><b>Optional Package Exception</b></html>" },

	{ "usability.menu.show_console", "Show Java Console" },
	{ "usability.menu.hide_console", "Hide Java Console" },
	{ "usability.menu.about", "About Java Plug-in" },
	{ "usability.menu.copy", "Copy" },
	{ "usability.menu.open_console", "Open Java Console" },
	{ "usability.menu.about_java", "About Java(TM)" },

	{ "proxy.error_caption", "Error - Proxy Configuration" },
	{ "proxy.prefsfile.nsreg_error", "<html><b>Unable to Retrieve Proxy Settings</b></html>Fallback to other proxy configuration.\n" },

	{ "cache.error.text", "<html><b>Caching Error</b></html>Unable to store or update files in the cache." },
	{ "cache.error.caption", "Error - Cache" },
	{ "cache.version_format_error", "{0} is not in the form xxxx.xxxx.xxxx.xxxx, where x is a hexadecimal digit" },
	{ "cache.version_attrib_error", "Number of attributes specified in \'cache_archive\' doesn't match those in \'cache_version\'" },
	{ "cache.header_fields_missing", "Last modified time and/or expiration value is not available.  Jar file will not be cached."},

	{ "applet.progress.load", "Loading applet ..." },
	{ "applet.progress.init", "Initializing applet ..." },
	{ "applet.progress.start", "Starting applet ..." },
	{ "applet.progress.stop", "Stopping applet ..." },
	{ "applet.progress.destroy", "Destroying applet ..." },
	{ "applet.progress.dispose", "Disposing applet ..." },
	{ "applet.progress.quit", "Quiting applet ..." },
	{ "applet.progress.stoploading", "Stopped loading ..." },
	{ "applet.progress.interrupted", "Interrupted thread ..." },
	{ "applet.progress.joining", "Joining applet thread ..." },
	{ "applet.progress.joined", "Joined applet thread ..." },
	{ "applet.progress.loadImage", "Loading image " },
	{ "applet.progress.loadAudio", "Loading audio " },
	{ "applet.progress.findinfo.0", "Finding information ..." },
	{ "applet.progress.findinfo.1", "Done ..." },
	{ "applet.progress.timeout.wait", "Waiting for timeout ..." },
	{ "applet.progress.timeout.jointing", "Doing a join ..." },
	{ "applet.progress.timeout.jointed", "Done with join ..." },


	{ "console.menu.text.top", "----------------------------------------------------\n" },
	{ "console.menu.text.c", "c:   clear console window\n" },
	{ "console.menu.text.f", "f:   finalize objects on finalization queue\n" },
	{ "console.menu.text.g", "g:   garbage collect\n" },
	{ "console.menu.text.h", "h:   display this help message\n" },
	{ "console.menu.text.j", "j:   dump jcov data\n"},
	{ "console.menu.text.l", "l:   dump classloader list\n" },
	{ "console.menu.text.m", "m:   print memory usage\n" },
	{ "console.menu.text.o", "o:   trigger logging\n" },
	{ "console.menu.text.p", "p:   reload proxy configuration\n" },
	{ "console.menu.text.q", "q:   hide console\n" },
	{ "console.menu.text.r", "r:   reload policy configuration\n" },
	{ "console.menu.text.s", "s:   dump system properties\n" },
	{ "console.menu.text.t", "t:   dump thread list\n" },
	{ "console.menu.text.v", "v:   dump thread stack\n" },
	{ "console.menu.text.x", "x:   clear classloader cache\n" },
	{ "console.menu.text.0", "0-5: set trace level to <n>\n" },
	{ "console.menu.text.tail", "----------------------------------------------------\n" },
	{ "console.done", "Done." },
	{ "console.trace.level.0", "Trace level set to 0: none ... completed." },
	{ "console.trace.level.1", "Trace level set to 1: basic ... completed." },
	{ "console.trace.level.2", "Trace level set to 2: basic, net ... completed." },
	{ "console.trace.level.3", "Trace level set to 3: basic, net, security ... completed." },
	{ "console.trace.level.4", "Trace level set to 4: basic, net, security, ext ... completed." },
	{ "console.trace.level.5", "Trace level set to 5: basic, net, security, ext, liveconnect ... completed." },
	{ "console.log", "Logging set to : " },
	{ "console.completed", " ... completed." },
	{ "console.dump.thread", "Dump thread list ...\n" },
	{ "console.dump.stack", "Dump thread stack ...\n" },
	{ "console.dump.properties", "Dump system properties ...\n" },
	{ "console.clear.classloader", "Clear classloader cache ... completed." },
	{ "console.reload.policy", "Reload policy configuration" },
	{ "console.reload.proxy", "Reload proxy configuration ..." },
	{ "console.gc", "Garbage collect" },
	{ "console.finalize", "Finalize objects on finalization queue" },
	{ "console.memory", "Memory: {0}K  Free: {1}K  ({2}%)" },
	{ "console.jcov.error", "Jcov runtime error: check that if you specified the right jcov option\n"},
	{ "console.jcov.info", "Jcov data dumped successfully\n"},

	{ "modality.register", "Registered modality listener" },
	{ "modality.unregister", "Unregistered modality listener" },
	{ "modality.pushed", "Modality pushed" },
	{ "modality.popped", "Modality popped" },

	{ "progress.listener.added", "Added progress listener: {0}" },
	{ "progress.listener.removed", "Removed progress listener: {0}" },

	{ "liveconnect.UniversalBrowserRead.enabled", "JavaScript: UniversalBrowserRead enabled" },
	{ "liveconnect.java.system", "JavaScript: calling Java system code" },
	{ "liveconnect.same.origin", "JavaScript: caller and callee have same origin" },
	{ "liveconnect.default.policy", "JavaScript: default security policy = {0}" },
	{ "liveconnect.UniversalJavaPermission.enabled", "JavaScript: UniversalJavaPermission enabled" },
	{ "liveconnect.wrong.securitymodel", "Netscape security model is no longer supported.\n"
					     + "Please migrate to the Java 2 security model instead.\n" },

	{ "jpicertstore.cert.loading", "Loading JPI certificates from {0}" },
	{ "jpicertstore.cert.loaded", "Loaded JPI certificates from {0}" },
	{ "jpicertstore.cert.saving", "Saving JPI certificates in {0}" },
	{ "jpicertstore.cert.saved", "Saved JPI certificates in {0}" },
	{ "jpicertstore.cert.adding", "Adding certificate in JPI permanent certificate store", },
	{ "jpicertstore.cert.added", "Added certificate in JPI permanent certificate store as alias {0}" },
	{ "jpicertstore.cert.removing", "Removing certificate in JPI permanent certificate store" },
	{ "jpicertstore.cert.removed", "Removed certificate in JPI permanent certificate store as alias {0}" },
	{ "jpicertstore.cert.instore", "Checking if certificate is in JPI permanent certificate store" },
	{ "jpicertstore.cert.canverify", "Check if certificate can be verified using certificates in JPI permanent certificate store" },
	{ "jpicertstore.cert.iterator", "Obtain certificate iterator in JPI permanent certificate store" },
	{ "jpicertstore.cert.getkeystore", "Obtain key store object of JPI certificate store" },

	{ "jpihttpscertstore.cert.loading", "Loading JPI Https certificates from {0}" },
	{ "jpihttpscertstore.cert.loaded", "Loaded JPI Https certificates from {0}" },
	{ "jpihttpscertstore.cert.saving", "Saving JPI Https certificates in {0}" },
	{ "jpihttpscertstore.cert.saved", "Saved JPI Https certificates in {0}" },
	{ "jpihttpscertstore.cert.adding", "Adding Https certificate in JPI permanent certificate store", },
	{ "jpihttpscertstore.cert.added", "Added Https certificate in JPI permanent certificate store as alias {0}" },
	{ "jpihttpscertstore.cert.removing", "Removing Https certificate in JPI permanent certificate store" },
	{ "jpihttpscertstore.cert.removed", "Removed Https certificate in JPI permanent certificate store as alias {0}" },
	{ "jpihttpscertstore.cert.instore", "Checking if Https certificate is in JPI permanent certificate store" },
	{ "jpihttpscertstore.cert.canverify", "Check if Https certificate can be verified using certificates in JPI permanent certificate store" },
	{ "jpihttpscertstore.cert.iterator", "Obtain Https certificate iterator in JPI permanent certificate store" },
	{ "jpihttpscertstore.cert.getkeystore", "Obtain key store object of Https certificate store" },

	{ "rootcertstore.cert.loading", "Loading Root CA certificates from {0}" },
	{ "rootcertstore.cert.loaded", "Loaded Root CA certificates from {0}" },
	{ "rootcertstore.cert.noload", "Root CA certificates file not found: {0}" },
	{ "rootcertstore.cert.saving", "Saving Root CA certificates in {0}" },
	{ "rootcertstore.cert.saved", "Saved Root CA certificates in {0}" },
	{ "rootcertstore.cert.adding", "Adding certificate in Root CA certificate store", },
	{ "rootcertstore.cert.added", "Added certificate in Root CA certificate store as alias {0}" },
	{ "rootcertstore.cert.removing", "Removing certificate in Root CA certificate store" },
	{ "rootcertstore.cert.removed", "Removed certificate in Root CA certificate store as alias {0}" },
	{ "rootcertstore.cert.instore", "Checking if certificate is in Root CA certificate store" },
	{ "rootcertstore.cert.canverify", "Check if certificate can be verified using certificates in Root CA certificate store" },
	{ "rootcertstore.cert.iterator", "Obtain certificate iterator in Root CA certificate store" },
	{ "rootcertstore.cert.getkeystore", "Obtain key store object of Root CA certificate store" },
	{ "rootcertstore.cert.verify.ok", "Certificate has been verified with Root CA certificates sucessfully" },
	{ "rootcertstore.cert.verify.fail", "Certificate has failed the verification with the Root CA certificates" },
	{ "rootcertstore.cert.tobeverified", "Certificate to be verified:\n{0}" },
	{ "rootcertstore.cert.tobecompared", "Comparing certificate against Root CA certificate:\n{0}" },

	{ "roothttpscertstore.cert.loading", "Loading Https Root CA certificates from {0}" },
	{ "roothttpscertstore.cert.loaded", "Loaded Https Root CA certificates from {0}" },
	{ "roothttpscertstore.cert.noload", "Https Root CA certificates file not found: " },
	{ "roothttpscertstore.cert.saving", "Saving Https Root CA certificates in {0}" },
	{ "roothttpscertstore.cert.saved", "Saved Https Root CA certificates in " },
	{ "roothttpscertstore.cert.adding", "Adding certificate in Https Root CA certificate store", },
	{ "roothttpscertstore.cert.added", "Added certificate in Https Root CA certificate store as alias " },
	{ "roothttpscertstore.cert.removing", "Removing certificate in Https Root CA certificate store" },
	{ "roothttpscertstore.cert.removed", "Removed certificate in Https Root CA certificate store as alias " },
	{ "roothttpscertstore.cert.instore", "Checking if certificate is in Https Root CA certificate store" },
	{ "roothttpscertstore.cert.canverify", "Check if certificate can be verified using certificates in Https Root CA certificate store" },
	{ "roothttpscertstore.cert.iterator", "Obtain certificate iterator in Https Root CA certificate store" },
	{ "roothttpscertstore.cert.getkeystore", "Obtain key store object of Https Root CA certificate store" },
	{ "roothttpscertstore.cert.verify.ok", "Certificate has been verified with Https Root CA certificates sucessfully" },
	{ "roothttpscertstore.cert.verify.fail", "Certificate has failed the verification with the Https Root CA certificates" },
	{ "roothttpscertstore.cert.tobeverified", "Certificate to be verified:\n{0}" },
	{ "roothttpscertstore.cert.tobecompared", "Comparing certificate against Https Root CA certificate:\n{0}" },

	{ "sessioncertstore.cert.loading", "Loading certificates from JPI session certificate store" },
	{ "sessioncertstore.cert.loaded", "Loaded certificates from JPI session certificate store" },
	{ "sessioncertstore.cert.saving", "Saving certificates in JPI session certificate store" },
	{ "sessioncertstore.cert.saved", "Saved certificates in JPI session certificate store" },
	{ "sessioncertstore.cert.adding", "Adding certificate in JPI session certificate store", },
	{ "sessioncertstore.cert.added", "Added certificate in JPI session certificate store" },
	{ "sessioncertstore.cert.removing", "Removing certificate in JPI session certificate store" },
	{ "sessioncertstore.cert.removed", "Removed certificate in JPI session certificate store" },
	{ "sessioncertstore.cert.instore", "Checking if certificate is in JPI session certificate store" },
	{ "sessioncertstore.cert.canverify", "Check if certificate can be verified using certificates in JPI session certificate store" },
	{ "sessioncertstore.cert.iterator", "Obtain certificate iterator in JPI session certificate store" },
	{ "sessioncertstore.cert.getkeystore", "Obtain key store object of JPI session certificate store" },

	{ "hostnameverifier.automation.ignoremismatch", "Automation: Ignore hostname mismatch" },
        { "pluginclassloader.created_files", "Created {0} in cache." },
        { "pluginclassloader.deleting_files", "Deleting JAR files from cache." },
        { "pluginclassloader.file", "   deleting from cache {0}" },
        { "pluginclassloader.empty_file", "{0} is empty, deleting from cache." },

	{ "trustdecider.check.basicconstraints", "Check basic constraints failed in certificate" },
	{ "trustdecider.check.leafkeyusage", "Check leaf key usage failed in certificate" },
	{ "trustdecider.check.signerkeyusage", "Check signer key usage failed in certificate" },
	{ "trustdecider.check.extensions", "Check critical extensions failed in certificate" },
	{ "trustdecider.check.signature", "Check signature failed in certificate" },
	{ "trustdecider.check.basicconstraints.certtypebit", "Check netscape type bit failed in certificate" },
	{ "trustdecider.check.basicconstraints.extensionvalue", "Check netscape extension value failed in certificate" },
	{ "trustdecider.check.basicconstraints.bitvalue", "Check netscape bits 5,6,7 value failed in certificate" },
	{ "trustdecider.check.basicconstraints.enduser", "Check end user act as a CA failed in certificate" },
	{ "trustdecider.check.basicconstraints.pathlength", "Check path length constraints failed in certificate" },
	{ "trustdecider.check.leafkeyusage.length", "Check length of key usage failed in certificate" },
	{ "trustdecider.check.leafkeyusage.digitalsignature", "Check digital signature failed in certificate" },
	{ "trustdecider.check.leafkeyusage.extkeyusageinfo", "Check extension key usage info failed in certificate" },
	{ "trustdecider.check.leafkeyusage.certtypebit", "Check netscape type bit failed in certificate" },
	{ "trustdecider.check.signerkeyusage.lengthandbit", "Check length and bit failed in certificate" },
	{ "trustdecider.check.signerkeyusage.keyusage", "Check key usage failed in certificate" },
	{ "trustdecider.check.canonicalize.updatecert", "Update root certificate with certificate in cacerts file" },
	{ "trustdecider.check.canonicalize.missing", "Add missing root certificate" },
	{ "trustdecider.check.gettrustedcert.find", "Find the valid root CA in cacerts file" },
	{ "trustdecider.check.gettrustedissuercert.find", "Find the missing valid root CA in cacerts file" },

	{ "trustdecider.user.grant.session", "User has granted the priviledges to the code for this session only" },
	{ "trustdecider.user.grant.forever", "User has granted the priviledges to the code forever" },
	{ "trustdecider.user.deny", "User has denied the priviledges to the code" },
	{ "trustdecider.automation.trustcert", "Automation: Trust RSA certificate for signing" },
	{ "x509trustmgr.automation.ignoreclientcert", "Automation: Ignore untrusted client certificate" },
	{ "x509trustmgr.automation.ignoreservercert", "Automation: Ignore untrusted server certificate" },

	{ "appletcontext.audio.loaded", "Loaded audio clip: {0}" },
	{ "appletcontext.image.loaded", "Loaded image: {0}" },

	{ "securitymgr.automation.printing", "Automation: Accept printing" },

	{ "classloaderinfo.referencing", "Referencing classloader: {0}, refcount={1}" },
	{ "classloaderinfo.releasing", "Releasing classloader: {0}, refcount={1}" },
	{ "classloaderinfo.caching", "Caching classloader: {0}" },
	{ "classloaderinfo.cachesize", "Current classloader cache size: {0}" },
	{ "classloaderinfo.num", "Number of cached classloaders over {0}, unreference {1}" },

	{ "trace.listener.added", "Added trace listener: {0}" },
	{ "trace.listener.removed", "Removed trace listener: {0}" },

	{ "cookiehandler.cache", "Cookie Cache: " },
	{ "cookiehandler.server", "Server {0} requesting to set-cookie with \"{1}\"" },
	{ "cookiehandler.connect", "Connecting {0} with cookie \"{1}\"" },
	{ "cookiehandler.ignore.setcookie", "Cookie service is unavailable - ignore \"Set-Cookie\"" },
	{ "cookiehandler.noservice", "Cookie service is not available - use cache to determine \"Cookie\"" },

	{ "jsobject.eval", "Evaluate {0} = {1}" },
        { "jsobject.call", "JSObject::call: name={0}, url={1}, permission={2}" },
        { "jsobject.eval.url.permission", "JSObject::eval({0}), url={1}, permission={2}" },
        { "jsobject.getMember", "JSObject::getMember: name={0}, url={1}, permission={2}" },
        { "jsobject.setMember", "JSObject::setMember: name={0}, url={1}, permission={2}" },
        { "jsobject.removeMember", "JSObject::removeMember: name={0}, url={1}, permission={2}" },
        { "jsobject.getSlot", "JSObject::getSlot: {0}, url={1}, permission={2}" },
        { "jsobject.setSlot", "JSObject::setSlot: slot={0}, url={1}, permission={2}" },

	{ "applet_install.ok", "Applet installation finished." },
	{ "applet_install.fail", "Applet installation failed." },

	{ "optpkg.install.info", "Installing optional package {0}" },
	{ "optpkg.install.fail", "Optional package installation failed." },
	{ "optpkg.install.ok", "Optional package installation succeeded." },
	{ "optpkg.install.automation", "Automation: Accept optional package installation" },
	{ "optpkg.install.granted", "Optional package download granted by user, download from {0}" },
	{ "optpkg.install.deny", "Optional package download not granted by user" },
	{ "optpkg.install.begin", "Installing {0}" },
	{ "optpkg.install.java.launch", "Launching Java installer" },
	{ "optpkg.install.java.launch.command", "Launching Java installer through ''{0}''" },
	{ "optpkg.install.native.launch", "Launching native installer" },
	{ "optpkg.install.native.launch.fail.0", "Unable to execute {0}" },
	{ "optpkg.install.native.launch.fail.1", "Access to {0} failed" },
	{ "optpkg.install.raw.launch", "Installing raw optional package" },
	{ "optpkg.install.raw.copy", "Copying Raw Optional Package from {0} to {1}" },
	{ "optpkg.install.error.nomethod", "Dependent Extension Provider not installed : Cannot get the "
				         + " addExtensionInstallationProvider method" },
	{ "optpkg.install.error.noclass", "Dependent Extension Provider not installed : Cannot get the "
					 + "sun.misc.ExtensionDependency class" },

	{ "dialogfactory.user.selected", "User selected: {0}" },
	{ "dialogfactory.user.typed", "User typed: {0}" },

	{"progress_dialog.downloading", "Plug-in: Downloading ..."},
        {"progress_dialog.dismiss_button", "Dismiss"},
        {"progress_dialog.dismiss_button.acceleratorKey", new Integer(KeyEvent.VK_D)},
        {"progress_dialog.from", "from"},

        {"applet_viewer.color_tag", "Incorrect number of components in {0}"},

        {"progress_info.downloading", "Downloading JAR file(s)"},
        {"progress_bar.preload", "Preloading JAR files: {0}"},

        {"cache.size", "Cache Size: {0}"},
        {"cache.cleanup", "Cache size is: {0} bytes, cleanup is necessary"},
        {"cache.full", "Cache is full: deleting file {0}"},
        {"cache.inuse", "Cannot delete file {0} since it is being used by this application"},
        {"cache.notdeleted", "Cannot delete file {0}, may be used by this and/or other application(s)"},
        {"cache.out_of_date", "Cached copy of {0} is out of date\n  Cached copy: {1}\n  Server copy: {2}"},
        {"cache.loading", "Loading {0} from cache"},
        {"cache.cache_warning", "WARNING: Unable to cache {0}"},
        {"cache.downloading", "Downloading {0} to cache"},
        {"cache.cached_name", "Cached file name: {0}"},
        {"cache.load_warning", "WARNING: error reading {0} from cache."},
        {"cache.disabled", "Cache is disabled by user"},
        {"cache.minSize", "Cache is disabled, cache limit is set to {0}, at least 5 MB should be specified"},
        {"cache.directory_warning", "WARNING: {0} is not a directory.  Cache will be disabled."},
        {"cache.response_warning", "WARNING: Unexpected response {0} for {1}.  File will be downloaded again."},
        {"cache.enabled", "Cache is enabled"},
        {"cache.location", "Location: {0}"},
        {"cache.maxSize", "Maximum size: {0}"},
        {"cache.create_warning", "WARNING: Could not create cache directory {0}.  Caching will be disabled."},
        {"cache.read_warning", "WARNING: Cannot read cache directory {0}.  Caching will be disabled."},
        {"cache.write_warning", "WARNING: Cannot write to cache directory {0}.  Caching will be disabled."},
        {"cache.compression", "Compression level: {0}"},
        {"cache.cert_load", "Certificates for {0} is read from JAR cache"},
	{"cache.jarjar.invalid_file", ".jarjar file contains a non .jar file"},
	{"cache.jarjar.multiple_jar", ".jarjar file contains more than one .jar file"},
        {"cache.version_checking", "Version checking for {0}, specified version is {1}"},
        {"cache.preloading", "Preloading file {0}"},

	{ "cache_viewer.caption", "Details - Cache" },
	{ "cache_viewer.refresh", "Refresh" },
	{ "cache_viewer.refresh.acceleratorKey", new Integer(KeyEvent.VK_R) },
        { "cache_viewer.remove", "Delete" },
	{ "cache_viewer.remove.acceleratorKey", new Integer(KeyEvent.VK_D) },
        { "cache_viewer.close", "Close" },
	{ "cache_viewer.close.acceleratorKey", new Integer(KeyEvent.VK_C) },
        { "cache_viewer.name", "Name" },
	{ "cache_viewer.type", "Type" },
	{ "cache_viewer.size", "Size" },
	{ "cache_viewer.modify_date", "Last Modified" },
	{ "cache_viewer.expiry_date", "Expiration Date" },
	{ "cache_viewer.url", "URL" },
	{ "cache_viewer.version", "Version" },
	{ "cache_viewer.help.name", "Cached file name" },
	{ "cache_viewer.help.type", "Cached file type" },
	{ "cache_viewer.help.size", "Cached file size" },
	{ "cache_viewer.help.modify_date", "Cached file last modify date" },
	{ "cache_viewer.help.expiry_date", "Cached file expiration date" },
	{ "cache_viewer.help.url", "Cached file download URL" },
	{ "cache_viewer.help.version", "Cached file version" },
	{ "cache_viewer.delete.text", "<html><b>File Not Deleted</b></html>{0} may be in use.\n" },
	{ "cache_viewer.delete.caption", "Error - Cache" },
	{ "cache_viewer.type.zip", "Jar" },
	{ "cache_viewer.type.class", "Class" },
	{ "cache_viewer.type.wav", "Wav Sound" },
	{ "cache_viewer.type.au", "Au Sound" },
	{ "cache_viewer.type.gif", "Gif Image" },
	{ "cache_viewer.type.jpg", "Jpeg Image" },

	{ "net.proxy.loading.ie", "Loading proxy configuration from Internet Explorer ..."},
	{ "net.proxy.loading.ns", "Loading proxy configuration from Netscape Navigator ..."},
	{ "net.proxy.loading.userdef", "Loading user-defined proxy configuration ..."},
	{ "net.proxy.loading.direct", "Loading direct proxy configuration ..."},
	{ "net.proxy.loading.manual", "Loading manual proxy configuration ..."},
	{ "net.proxy.loading.auto",   "Loading auto proxy configuration ..."},
	{ "net.proxy.loading.browser",   "Loading browser proxy configuration ..."},
	{ "net.proxy.loading.manual.error", "Unable to use manual proxy configuration - fallback to DIRECT"},
	{ "net.proxy.loading.auto.error", "Unable to use auto proxy configuration - fallback to MANUAL"},
	{ "net.proxy.loading.done", "Done."},
	{ "net.proxy.browser.pref.read", "Reading user preference file from {0}"},
	{ "net.proxy.browser.proxyEnable", "    Proxy enable: {0}"},
	{ "net.proxy.browser.proxyList",     "    Proxy list: {0}"},
	{ "net.proxy.browser.proxyOverride", "    Proxy override: {0}"},
	{ "net.proxy.browser.autoConfigURL", "    Auto config URL: {0}"},
	{ "net.proxy.browser.smartConfig", "Ping the proxy server {0} on port {1}"},
        { "net.proxy.browser.connectionException", "Proxy server {0} on port {1} can not be reached"},
	{ "net.proxy.ns6.regs.exception", "Error reading registry file: {0}"},
	{ "net.proxy.pattern.convert", "Convert proxy bypass list to regular expression: "},
	{ "net.proxy.pattern.convert.error", "Unable to convert proxy bypass list to regular expression - ignore"},
	{ "net.proxy.auto.download.ins", "Downloading INS file from {0}" },
	{ "net.proxy.auto.download.js", "Downloading auto proxy file from {0}" },
	{ "net.proxy.auto.result.error", "Unable to determine proxy setting from evaluation - fallback to DIRECT"},
        { "net.proxy.service.not_available", "Proxy service not available for {0} - default to DIRECT" },

	{ "lifecycle.applet.found", "Found previous stopped applet from lifecycle cache" },
	{ "lifecycle.applet.support", "Applet supports legacy lifecycle model - add applet to lifecycle cache" },
	{ "lifecycle.applet.cachefull", "Lifecycle cache is full - prune least recently used applets" },

	{ "com.method.ambiguous", "Unable to select a method, ambiguous parameters" },
	{ "com.method.notexists", "{0} :no such method exists" },
	{ "com.notexists", "{0} :no such method/property exists" },
	{ "com.method.invoke", "Invoking method: {0}" },
	{ "com.method.jsinvoke", "Invoking JS method: {0}" },
	{ "com.method.argsTypeInvalid", "The parameters cannot be converted to the required types" },
	{ "com.method.argCountInvalid", "Number of arguments is not correct" },
	{ "com.field.needsConversion", "Needs conversion: {0} --> {1}" },
	{ "com.field.typeInvalid", " cannot be converted to type: {0}" },
	{ "com.field.get", "Getting property: {0}" },
	{ "com.field.set", "Setting property: {0}" },

	{"about.java.version", "Version"},
	{"about.prompt.info", "For more information visit"},
	{"about.home.link", "http://www.java.com"},
	{"about.option.close", "Close"},
	{"about.legal.note", "Copyright  2003 Sun Microsystems, Inc.  All rights reserved.  Use is " +
			     "subject to license terms.  Third-party software, including font " +
			     "technology, is copyrighted and licensed from Sun suppliers.  Portions " +
			     "Copyright Eastman Kodak Company 1992.  This product includes code " + 
			     "licensed from RSA Data Security.  Sun,  Sun Microsystems,  the Sun " + 
			     "logo,  Java,  Solaris and  J2SE are trademarks or registered " +
			     "trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  " + 
			     "All SPARC trademarks are used under license and are trademarks or " + 
			     "registered trademarks of SPARC International, Inc. in the U.S. and " + 
			     "other countries.  Federal Acquisitions: Commercial Software - " + 
			     "Government Users Subject to Standard License Terms and Conditions."}
    };
}


