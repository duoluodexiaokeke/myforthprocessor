#
# Copyright 2003 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

# @(#)Sanity.gmk	1.63 03/05/30

# Settings and rules to validate the J2SE build environment.

# MIN_FREE_DISK is determined by running 'du -sk' on a fully built workspace.
# ISHIELD_TEMP_MIN is the difference of an empty C:\TEMP vs. one after a 
# bundles build on windows.

ifeq ($(PLATFORM), solaris)
  SHOWREV = /usr/bin/showrev
  FREE_SPACE := $(shell $(DF) -b $(OUTPUTDIR) | $(NAWK) '{if ($$2 != "avail") print $$2;}')
  CC_VER := $(shell $(CC) -V 2>&1 | $(NAWK) '{ for (i=4; i<NF; i++) if ($$i=="C") {print $$++i; exit 0} }')
  SOLARIS_MAJOR_VERSION := $(word 1, $(subst ., ,$(OS_VERSION)))
  SOLARIS_MINOR_VERSION := $(word 2, $(subst ., ,$(OS_VERSION)))
  REQ_PATCH_LIST = $(TOPDIR)/src/share/doc/build/PatchList.solaris
  ifeq ($(ARCH_DATA_MODEL), 32)
    GCC_VER := $(shell $(GCC_COMPILER_PATH)/gcc --version )
  endif
  ifeq ($(ARCH_FAMILY), sparc)
    MIN_FREE_DISK=1300000
    PATCH_POSITION = $$4
  else
    MIN_FREE_DISK=1040000
    PATCH_POSITION = $$6
  endif
endif

ifeq ($(PLATFORM), linux)
  MIN_FREE_DISK=1460000
  FREE_SPACE := $(shell $(DF) --sync -kP $(OUTPUTDIR) | $(NAWK) '{if ($$4 != "Available") print $$4;}')
  CC_VER := $(shell $(CC) -dumpversion | $(SED) 's/egcs-//')
  RH_VERSION := $(shell $(NAWK) '{ print $$5; }' /etc/redhat-release )
  ifeq ($(ARCH_DATA_MODEL), 32)
    REQUIRED_RH_VER = 6.1
    REQUIRED_OS_VER = 2.2.*
    REQUIRED_GCC_VER = 2.91.*
    # ALSA 0.9.0rc5 and above
    REQUIRED_ALSA_VERSION = ^0.9.(0(rc[56789]|rc[12][0123456789])?|[0123456789]+)$$
    # dummy program that outputs ALSA's version (created in target alsa-versioncheck)
    ALSA_VERSION_CHECK = $(TMPDIR)/alsaversioncheck
    ALSA_VERSION = `if [ -f $(ALSA_VERSION_CHECK) ] ; then $(ALSA_VERSION_CHECK) ; fi`
  else
    REQUIRED_RH_VER = 7.2
    REQUIRED_OS_VER = 2.4.*
    REQUIRED_GCC_VER = 2.9[56789].*
  endif
endif

ifeq ($(PLATFORM), windows)
  OS := $(shell $(UNAME))
  MIN_FREE_DISK=500000
  ISHIELD_TEMP_MIN=250000
  REQUIRED_UNZIP_VER = 5.1[23456789]
  FREE_SPACE := $(shell $(DF) -kP $(OUTPUTDIR) | $(NAWK) '{if ($$4 != "Available") print $$4;}')
  TEMP_FREE_SPACE := $(shell $(DF) -kP C:/TEMP | $(NAWK) '{if ($$4 != "Available") print $$4;}')
  WINDOWS_VERSION := $(shell $(BUILDDIR)/tools/winver/winver.exe)
  UNZIP_VER := $(shell $(UNZIP) | $(HEAD) -n 1 | $(NAWK) '{print $$2}')
  REQUIRED_DXSDK_VER = 0x0700
  DXSDK_VER := $(shell $(EGREP) DIRECTDRAW_VERSION $(DXSDK_INCLUDE_PATH)/ddraw.h 2>&1 | \
    $(EGREP) "\#define" | $(NAWK) '{print $$3}')
  ifeq ($(ARCH_DATA_MODEL), 32)
    COMPILER_NAME="Visual C++ 6.0 Professional + VC6-SP 3"
    CC_VER := $(shell $(CC) 2>&1 | $(HEAD) -n 1 | $(NAWK) '{print $$8}')
    CC_TYPE := $(shell $(CC) 2>&1 | $(HEAD) -n 1 | $(NAWK) '{print $$5}')
    REQUIRED_CCTYPE = Optimizing
    REQUIRED_CCVER = 12.00.8168
    REQUIRED_LINKVER = 6.00.8447
  else
    COMPILER_NAME="Microsoft Platform SDK - November 2001 Edition"
    CC_VER := $(shell $(CC) 2>&1 | $(HEAD) -n 1 | $(NAWK) '{print $$7}')
    REQUIRED_CCVER = 13.00.9337.7
    REQUIRED_LINKVER = 7.00.9337.7
  endif
  LINK_VER := $(shell $(LINK) | $(HEAD) -n 1 | $(NAWK) '{print $$6}')
endif

REQUIRED_ZIP_VER = 2.[23456789]

ZIP_VER := $(shell $(ZIPEXE) -help | $(HEAD) -n 4 | $(NAWK) '{if ($$1 == "Zip") print $$2;}')

JAVA_VERSION := $(shell $(BOOTDIR)/bin/java$(EXE_SUFFIX) -version 2>&1  | $(NAWK) -F'"' '{ print $$2 }')

INSTALL_PATCHES_FILE = $(TMPDIR)/installed.patches

.PHONY: \
	pre-sanity \
	settings \
	sanity \
	sanity-base \
	sanity-docs \
	sanity-images \
	post-sanity-all \
	post-sanity-docs \
	post-sanity-images \
	sanity-all \
	insane \
	os_version \
	classpath \
	java_home \
	variant \
	ld_library_path \
	ld_library_path_64 \
	ld_options \
	ld_run_path \
	makeflags \
	alt_outputdir \
	outputdir \
	alt_bootdir \
	bootdir \
	motif \
	devtools_path \
	compiler_path \
	unixcommand_path \
	usrbin_path \
	unixccs_path \
	odbcdir \
	msdevtools_path \
	hotspot_binaries \
	compiler \
	cacerts \
	alsa-versioncheck \
	alsa-headers \
	zip_version \
	msvcrt_path

# EXTERNALSANITYCONTROL means that this j2se workspace build is being controlled by
# the control workspace, and that workspace is managing what is done to the sanity
# check files, and this sanity check run is only appending to those files.
pre-sanity: 
ifndef EXTERNALSANITYCONTROL
	@$(RM) $(ERROR_FILE) $(WARNING_FILE) $(MESSAGE_FILE)
endif

sanity-base: $(OUTPUTDIR) $(TMPDIR) pre-sanity settings insane make os_version makeflags alt_outputdir outputdir devtools_path compiler_path unixcommand_path usrbin_path unixccs_path odbcdir msdevtools_path dxsdk compiler cacerts zip_version msvcrt_path

# The rules sanity-* have a one-to-one correspondence with the major targets
# Each sanity-* rule should have no body to ensure that the post-sanity-* is the
# last rule executed. The pre-sanity rule should be the first dependency. This design 
# expects the execution of pre-sanity only once per gnumake command invocation, 
# thus, info written to ERROR_FILE and/or WARNING_FILE will not be removed by subsequent
# targets in the same 'gnumake' command line.

sanity-all:: sanity-base classpath java_home variant ld_library_path ld_library_path_64 ld_options ld_run_path alt_bootdir bootdir alsa-headers

# always check motif path on solaris
ifeq ($(PLATFORM), solaris)
sanity-all:: motif 
endif

# on Linux, only check motif path if we are not building it from scratch
ifeq ($(PLATFORM), linux)
  ifndef TOOLS_ONLY
sanity-all:: motif 
  endif
endif

# only check hotspot binary paths if we are not building them from scratch
ifndef TOOLS_ONLY
sanity-all:: hotspot_binaries
endif

sanity-docs: sanity-base 

sanity-images:: sanity-base

sanity:: sanity-all sanity-docs sanity-images post-sanity

# this should be the last rule in any target's sanity rule.
post-sanity post-sanity-all post-sanity-docs post-sanity-images:
ifndef EXTERNALSANITYCONTROL
	@if [ -r $(MESSAGE_FILE) ]; then \
	  $(CAT) $(MESSAGE_FILE) ; \
	fi
	@if [ -r $(WARNING_FILE) ]; then \
	  $(CAT) $(WARNING_FILE) ; \
	fi
	@if [ "x$(INSANE)" != x ]; then \
	  $(ECHO) "INSANE mode requested. \n" \
	    "Sanity will not force a build termination, even with errors.\n" \
	    "" >> $(ERROR_FILE); \
	fi
	@if [ -r $(ERROR_FILE) ]; then \
	  if [ "x$(INSANE)" = x ]; then \
	    $(ECHO) "Exiting because of the above error(s). \n" \
	      "">> $(ERROR_FILE); \
	  fi ; \
	  $(CAT) $(ERROR_FILE) ; \
	  if [ "x$(INSANE)" = x ]; then \
	    exit 1 ; \
	  fi ; \
	fi
ifdef PEDANTIC
	@if [ -r $(WARNING_FILE) ]; then \
	  $(ECHO) "PEDANTIC mode requested. \n" \
	    "Exiting because of the above warning(s). \n" \
	    "" >> $(ERROR_FILE); \
	  $(CAT) $(ERROR_FILE) ; \
	  exit 1 ; \
	fi
endif # PEDANTIC
	@if [ ! -r $(ERROR_FILE) ]; then \
	  $(ECHO) "Sanity check passed." ; \
	fi
endif #  EXTERNALSANITYCONTROL

######################################################
# check for INSANE variable
######################################################
insane:
ifdef INSANE
	@$(ECHO) "WARNING: You are building in 'INSANE' mode. You \n" \
	   "        should not use this mode, and in fact, \n" \
	   "        it may be removed at any time. If you \n" \
	   "        have build problems as a result of using \n" \
	   "        INSANE mode, then you should not expect \n" \
	   "        assistance from anyone with the problems \n" \
	   "        or consequences you experience. \n" \
	   "" >> $(WARNING_FILE)
endif
######################################################
# check for GNU Make version
######################################################
make:
	@if [ `$(MAKE) -version | $(HEAD) -n 1 | $(NAWK) '{ print $$4; }' | $(EGREP) -c '3.7[89].1,'` -ne 1 ]; then \
	  $(ECHO) "WARNING: The version of make being used does not match \n" \
	    "      the expected version for this platform. \n" \
	    "      The version of make found was ->`$(MAKE) -version | $(HEAD) -n 1 | $(NAWK) '{ print $$4; }'`<- \n" \
	    "      The version expected matches the pattern ->3.7[89].1,<-. \n" \
	    "" >> $(WARNING_FILE) ; \
	fi

######################################################
# dump out the variable settings...
######################################################
settings:: alsa-versioncheck
	@$(ECHO) "Bootstrap Settings:" >> $(MESSAGE_FILE)
	@$(ECHO) "   BOOTDIR = $(BOOTDIR) " >> $(MESSAGE_FILE)
	@$(ECHO) "   BOOTSTRAP J2SDK VERSION: $(shell $(JAVA_BOOT) -version 2>&1  | $(NAWK) -F'"' '{ print $$2 }')" >> $(MESSAGE_FILE)
	@$(ECHO) "   OUTPUTDIR = $(ABS_OUTPUTDIR) " >> $(MESSAGE_FILE)
	@#
	@$(ECHO) >> $(MESSAGE_FILE)
	@$(ECHO) "Build Tool Settings:" >> $(MESSAGE_FILE)
	@$(ECHO) "   UNIXCOMMAND_PATH = $(UNIXCOMMAND_PATH) " >> $(MESSAGE_FILE)
	@$(ECHO) "   COMPILER_PATH = $(COMPILER_PATH) " >> $(MESSAGE_FILE)
	@$(ECHO) "   DEVTOOLS_PATH = $(DEVTOOLS_PATH) " >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), solaris)
	@$(ECHO) "   UNIXCCS_PATH = $(UNIXCCS_PATH) " >> $(MESSAGE_FILE)
  ifeq ($(ARCH_DATA_MODEL), 32)
	@$(ECHO) "   GCC_COMPILER_PATH = $(GCC_COMPILER_PATH) " >> $(MESSAGE_FILE)
  endif
endif
ifeq ($(PLATFORM), linux)
	@$(ECHO) "   USRBIN_PATH = $(USRBIN_PATH) " >> $(MESSAGE_FILE)
endif
ifeq ($(PLATFORM), windows)
	@$(ECHO) "   MSVCRT_DLL_PATH  = $(MSVCRT_DLL_PATH)/msvcrt.dll " >> $(MESSAGE_FILE)
  ifeq ($(ARCH_DATA_MODEL), 64)
	@$(ECHO) "   MSVCRTD_DLL_PATH = $(MSVCRTD_DLL_PATH)/msvcrtd.dll " >> $(MESSAGE_FILE)
  endif
	@$(ECHO) "   MSDEVTOOLS_PATH = $(MSDEVTOOLS_PATH) " >> $(MESSAGE_FILE)
else
	@$(ECHO) "   MOTIF_DIR = $(MOTIF_DIR) " >> $(MESSAGE_FILE)
endif
ifeq ($(PLATFORM), solaris)
	@$(ECHO) "   ODBCDIR = $(ODBCDIR) " >> $(MESSAGE_FILE)
endif
	@$(ECHO) "   CC_VER = $(CC_VER) " >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), solaris)
	@$(ECHO) "   GCC_VER = $(GCC_VER) " >> $(MESSAGE_FILE)
endif
	@$(ECHO) "   ZIP_VER = $(ZIP_VER) " >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), windows)
	@$(ECHO) "   UNZIP_VER = $(UNZIP_VER) " >> $(MESSAGE_FILE)
	@$(ECHO) "   LINK_VER = $(LINK_VER) " >> $(MESSAGE_FILE)
endif
	@$(ECHO) "   PATH = $(PATH) " >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), windows)
	@$(ECHO) " " >> $(MESSAGE_FILE)
endif
	@$(ECHO) >> $(MESSAGE_FILE)
	@$(ECHO) "Build Directives:" >> $(MESSAGE_FILE)
	@$(ECHO) "   USE_ONLY_BOOTDIR_TOOLS = $(USE_ONLY_BOOTDIR_TOOLS) " >> $(MESSAGE_FILE)
	@$(ECHO) "   USE_HOTSPOT_INTERPRETER_MODE = $(USE_HOTSPOT_INTERPRETER_MODE) " >> $(MESSAGE_FILE)
	@$(ECHO) "   PEDANTIC = $(PEDANTIC) " >> $(MESSAGE_FILE)
	@$(ECHO) "   DEV_ONLY = $(DEV_ONLY) " >> $(MESSAGE_FILE)
	@$(ECHO) "   J2RE_ONLY = $(J2RE_ONLY) " >> $(MESSAGE_FILE)
	@$(ECHO) "   NO_DOCS = $(NO_DOCS) " >> $(MESSAGE_FILE)
	@$(ECHO) "   NO_IMAGES = $(NO_IMAGES) " >> $(MESSAGE_FILE)
	@$(ECHO) "   TOOLS_ONLY = $(TOOLS_ONLY) " >> $(MESSAGE_FILE)
	@$(ECHO) "   INSANE = $(INSANE) " >> $(MESSAGE_FILE)
	@#
	@$(ECHO)  >> $(MESSAGE_FILE)
	@$(ECHO) "Build Platform Settings:" >> $(MESSAGE_FILE)
	@$(ECHO) "   PLATFORM = $(PLATFORM) " >> $(MESSAGE_FILE)
	@$(ECHO) "   ARCH = $(ARCH) " >> $(MESSAGE_FILE)
	@$(ECHO) "   LIBARCH = $(LIBARCH) " >> $(MESSAGE_FILE)
	@$(ECHO) "   ARCH_FAMILY = $(ARCH_FAMILY) " >> $(MESSAGE_FILE)
	@$(ECHO) "   ARCH_DATA_MODEL = $(ARCH_DATA_MODEL) " >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), windows)
	@$(ECHO) "   PROCESSOR_ARCHITECTURE = $(word 1, $(PROCESSOR_IDENTIFIER)) " >> $(MESSAGE_FILE)
endif
ifeq ($(PLATFORM), linux)
	@$(ECHO) "   RH_VERSION = $(RH_VERSION) " >> $(MESSAGE_FILE)
endif
	@$(ECHO) "   OS_VERSION = $(OS_VERSION) " >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), linux)
  ifeq ($(ARCH_DATA_MODEL), 32)
	@$(ECHO) "   ALSA_VERSION = $(ALSA_VERSION) " >> $(MESSAGE_FILE)
  endif
endif
ifeq ($(PLATFORM), windows)
	@$(ECHO) "   WINDOWS_VERSION = $(WINDOWS_VERSION) " >> $(MESSAGE_FILE)
	@$(ECHO) "   TEMP_FREE_SPACE = $(TEMP_FREE_SPACE) " >> $(MESSAGE_FILE)
endif
	@$(ECHO) "   FREE_SPACE = $(FREE_SPACE) " >> $(MESSAGE_FILE)
	@$(ECHO)  >> $(MESSAGE_FILE)
	@$(ECHO) "GNU Make Settings:" >> $(MESSAGE_FILE)
	@$(ECHO) "   MAKE = $(MAKE) " >> $(MESSAGE_FILE)
	@$(ECHO) "   MAKE VERSION = `$(MAKE) -version | $(HEAD) -n 1 | $(NAWK) '{ print $$4; }'` " >> $(MESSAGE_FILE)
	@$(ECHO) "   MAKECMDGOALS = $(MAKECMDGOALS) " >> $(MESSAGE_FILE)
	@$(ECHO) "   MAKEFLAGS = $(MAKEFLAGS) " >> $(MESSAGE_FILE)
	@$(ECHO) "   SHELL = $(SHELL) " >> $(MESSAGE_FILE)
	@#
	@$(ECHO)  >> $(MESSAGE_FILE)
	@$(ECHO) "Target Build Versions:" >> $(MESSAGE_FILE)
	@$(ECHO) "   JDK_VERSION = $(JDK_VERSION) " >> $(MESSAGE_FILE)
	@$(ECHO) "   MILESTONE = $(MILESTONE) " >> $(MESSAGE_FILE)
	@$(ECHO) "   BUILD_NUMBER = $(BUILD_NUMBER) " >> $(MESSAGE_FILE)
	@#
	@$(ECHO)  >> $(MESSAGE_FILE)
	@$(ECHO) "External File/Binary Locations:" >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), windows)
	@$(ECHO) "   HOTSPOT_DRIVE = $(HOTSPOT_DRIVE) " >> $(MESSAGE_FILE)
	@$(ECHO) "   HOTSPOT_LIB_PATH = $(HOTSPOT_LIB_PATH) " >> $(MESSAGE_FILE)
endif
	@$(ECHO) "   HOTSPOT_SERVER_PATH = $(HOTSPOT_SERVER_PATH) " >> $(MESSAGE_FILE)
ifeq ($(ARCH_DATA_MODEL), 32)
	@$(ECHO) "   HOTSPOT_CLIENT_PATH = $(HOTSPOT_CLIENT_PATH) " >> $(MESSAGE_FILE)
endif
ifeq ($(PLATFORM), windows)
	@$(ECHO) "   DXSDK_DRIVE = $(DXSDK_DRIVE) " >> $(MESSAGE_FILE)
	@$(ECHO) "   DXSDK_INCLUDE_PATH = $(DXSDK_INCLUDE_PATH) " >> $(MESSAGE_FILE)
	@$(ECHO) "   DXSDK_LIB_PATH = $(DXSDK_LIB_PATH) " >> $(MESSAGE_FILE)
	@$(ECHO) "   DXSDK_VER = $(DXSDK_VER) " >> $(MESSAGE_FILE)
else
	@$(ECHO) "   MOTIF_DIR = $(MOTIF_DIR) " >> $(MESSAGE_FILE)
endif
	@$(ECHO) "   CACERTS_FILE = $(CACERTS_FILE) " >> $(MESSAGE_FILE)
	@$(ECHO)  >> $(MESSAGE_FILE)
	@$#

######################################################
# Check the OS version
######################################################
os_version: 
ifeq ($(PLATFORM), windows)
	@if [ "$(ARCH_DATA_MODEL)" = 32 ]; then \
	  if [ ! "$(OS)" = Windows_NT -a ! "$(OS)" = CYGWIN_NT-4.0 ]; then \
	    $(ECHO) "WARNING: You are building on an unsupported Windows Platform. \n" \
	      "        The supported platform for 32-bit windows builds is Windows \n" \
	      "        NT 4 with Service Pack 6. \n" \
	      "        The build will proceed assuming that you are running a \n" \
	      "        variant of a windows OS. \n" \
	      "" >> $(WARNING_FILE) ; \
	  fi; \
	  if [ ! "x$(WINDOWS_VERSION)" = "x4 0 Service Pack 6" ]; then \
	    $(ECHO) "WARNING: You are using an unsupported version of Windows NT. \n" \
	      "        The supported version is Windows NT 4 with Service Pack 6. \n" \
	      "        You appear to be using : $(WINDOWS_VERSION) \n" \
	      "" >> $(WARNING_FILE) ; \
	  fi; \
	else \
	  if [ "$(ARCH_DATA_MODEL)" = 64 ]; then \
	    if [ ! "$(OS)" = Windows_NT ]; then \
	    $(ECHO) "WARNING: You are building on an unsupported Windows Platform. \n" \
	      "        The supported platform for 64-bit windows builds is Windows XP.\n" \
	      "        The build will proceed assuming that you are running a \n" \
	      "        variant of a 64-bit Windows OS. \n" \
              "   $(OS) \n" \
	        "" >> $(WARNING_FILE) ; \
	    fi; \
	    if [ ! "x$(WINDOWS_VERSION)" = "x5 0 " -a ! "x$(WINDOWS_VERSION)" = "x5 1 " \
		-a ! "x$(WINDOWS_VERSION)" = "x5 2 " ]; then \
	      $(ECHO) "WARNING: You are using an unsupported version of Windows XP. \n" \
	        "        The supported version is Windows XP. \n" \
	        "        You appear to be using : $(WINDOWS_VERSION) \n" \
	        "" >> $(WARNING_FILE) ; \
	    fi; \
	  else \
	    $(ECHO) "ERROR: Your Windows installation is not valid for building a \n" \
	      "      J2SDK of the type you are requesting. \n" \
	      "      You are using an ARCH_DATA_MODEL value of $(ARCH_DATA_MODEL). \n" \
	      "      Please check your setting for ARCH_DATA_MODEL and start your build again. \n" \
	      "" >> $(ERROR_FILE) ; \
	  fi; \
	fi
endif
ifeq ($(PLATFORM), linux)
	@if [ -r /etc/redhat-release ]; then \
	  if [ `$(ECHO) $(RH_VERSION) | $(EGREP) -c '$(REQUIRED_RH_VER)'` -ne 1 ]; then \
	    $(ECHO) "WARNING: You are using an unsupported release of Linux. \n" \
	      "        The supported version is Red Hat Linux release $(REQUIRED_RH_VER). \n" \
	      "        Your release is version $(RH_VERSION) \n" \
	      "" >> $(WARNING_FILE) ; \
	  fi; \
	else \
	    $(ECHO) "WARNING: You are building on an unsupported brand of Linux. \n" \
	      "        The supported version is Red Hat Linux release $(REQUIRED_RH_VER). \n" \
	      "" >> $(WARNING_FILE) ; \
	fi
	@if [ `$(ECHO) $(OS_VERSION) | $(EGREP) -c '$(REQUIRED_OS_VER)'` -ne 1 ]; then \
	  $(ECHO) "WARNING: You are using an unsupported kernel version of Linux. \n" \
	    "        The supported kernel version is $(REQUIRED_OS_VER). \n" \
	    "        Your kernel version is $(OS_VERSION) \n" \
	    "" >> $(WARNING_FILE) ; \
	fi
	@if [ "$(ARCH_DATA_MODEL)" != 32 -a "$(ARCH_DATA_MODEL)" != 64 ]; then \
	    $(ECHO) "ERROR: Your Linux installation is not valid for building a \n" \
	      "      J2SDK of the type you are requesting. \n" \
	      "      You are using an ARCH_DATA_MODEL value of $(ARCH_DATA_MODEL). \n" \
	      "      Please check your setting for ARCH_DATA_MODEL and start your build again. \n" \
	      "" >> $(ERROR_FILE) ; \
	fi
endif
ifeq ($(PLATFORM), solaris)
	@if [ "x$(SOLARIS_MAJOR_VERSION)" = x -o "x$(SOLARIS_MINOR_VERSION)" = x ]; then \
	  $(ECHO) "ERROR: Cannot determine the version of Solaris are you running. \n" \
	    "      The build requires Solaris 2.7 or higher. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	  @if [ $(SOLARIS_MAJOR_VERSION) -ne 5 -o $(SOLARIS_MINOR_VERSION) -lt 7  ]; then \
	    $(ECHO) "WARNING: Your Solaris installation is not valid for building a \n" \
	      "      the J2SDK. You must be using Solaris 7 or greater. \n" \
	      "      Your release is $(SOLARIS_MAJOR_VERSION).$(SOLARIS_MINOR_VERSION) \n" \
	      "" >> $(WARNING_FILE) ; \
	  else \
	    if [ $(SOLARIS_MAJOR_VERSION) -ne 5 -o $(SOLARIS_MINOR_VERSION) -ne 7  ]; then \
	      $(ECHO) "WARNING: You are using an unsupported version of Solaris. \n" \
	        "        The supported version of Solaris for J2SDK builds is version Solaris 2.7. \n" \
	        "        Your release is version $(SOLARIS_MAJOR_VERSION).$(SOLARIS_MINOR_VERSION) \n" \
	        "" >> $(WARNING_FILE) ; \
	    fi; \
	  fi;
	@if [ "$(ARCH_DATA_MODEL)" != 32 -a "$(ARCH_DATA_MODEL)" != 64 ]; then \
	    $(ECHO) "ERROR: Your Solaris installation is not valid for building a \n" \
	      "      J2SDK of the type you are requesting. \n" \
	      "      You are using an ARCH_DATA_MODEL value of $(ARCH_DATA_MODEL). \n" \
	      "      Please check your setting for ARCH_DATA_MODEL and start your build again. \n" \
	      "" >> $(ERROR_FILE) ; \
	fi
	@$(SHOWREV) -p > $(INSTALL_PATCHES_FILE) 2>&1
	@$(NAWK) 'BEGIN { \
    readingInstallPatches = 0; \
    requiredCount = 0; \
    installCount = 0; \
} \
{ \
    if (readingInstallPatches) { \
        if ($$1=="Patch:") { \
            ns = split($$2,parts,"-");  \
            installPatchNo[installCount]=parts[1]; \
            installPatchRev[installCount]=parts[2]; \
            installCount++; \
        } \
    } \
     \
    if (!readingInstallPatches) { \
        if (index($$1,"#") != 0) continue; \
        if (match($$1,"BUILD") > 0 \
        && $$2 == $(SOLARIS_MAJOR_VERSION).$(SOLARIS_MINOR_VERSION) \
        && ($$7 == "REQ" || $$7 == "req") \
        && $(PATCH_POSITION) != "none" \
        && $(PATCH_POSITION) != "NONE") { \
            ns = split($(PATCH_POSITION),parts,"-");  \
            requiredPatchNo[requiredCount]=parts[1]; \
            requiredPatchRev[requiredCount]=parts[2]; \
            requiredCount++; \
       } \
    } \
} \
END { \
    errorCount=0; \
    for (i=0; i<requiredCount; i++) { \
        foundMatch = 0; \
        for (j=0; j<installCount; j++) { \
            if (installPatchNo[j] == requiredPatchNo[i] \
            && installPatchRev[j] >= requiredPatchRev[i]) { \
                foundMatch = 1; \
                break; \
            } \
        } \
        if ( foundMatch == 0) { \
            printf("WARNING: Your solaris install is missing the required patch %s-%s\n", requiredPatchNo[i], requiredPatchRev[i] ); \
            printf("         Please update your your system patches or build on a different machine.\n\n" ); \
            errorCount++; \
        } \
    } \
}' $(REQ_PATCH_LIST) readingInstallPatches=1 $(INSTALL_PATCHES_FILE) >> $(WARNING_FILE)
endif # PLATFORM

######################################################
# CLASSPATH cannot be set, unless you are insane.
######################################################
classpath:
ifdef CLASSPATH
	@$(ECHO) "ERROR: Your CLASSPATH environment variable is set.  This will \n" \
	   "      most likely cause the build to fail.  Please unset it \n" \
	   "      and start your build again. \n" \
	   "" >> $(ERROR_FILE)
endif

######################################################
# JAVA_HOME cannot be set, unless you are insane.
#
# javah_g (and java_g) fail if using Kestrel-Solaris as the
# bootstrap JDK:
#
#    There was an error trying to initialize the HPI library.
#    Please check your installation, HotSpot does not work correctly
#    when installed in the JDK 1.2 Solaris Production Release, or
#    with any JDK 1.1.x release.
#    Could not create the Java virtual machine.
######################################################
java_home:
ifdef JAVA_HOME
	@$(ECHO) "ERROR: Your JAVA_HOME environment variable is set.  This will \n" \
	   "      most likely cause the build to fail.  Please unset it \n" \
	   "      and start your build again. \n" \
	   "" >> $(ERROR_FILE)
endif

######################################################
# VARIANT cannot be set, unless you are insane.
######################################################
variant:
ifdef VARIANT
	@$(ECHO) "ERROR: Your VARIANT environment variable is set.  This will \n" \
	   "      cause the build to fail.  Please unset it \n" \
	   "      and start your build again. \n" \
	   "" >> $(ERROR_FILE)
endif

######################################################
# LD_LIBRARY_PATH should not be set, unless you are insane.
######################################################
ld_library_path:
ifdef LD_LIBRARY_PATH
	@$(ECHO) "ERROR: Your LD_LIBRARY_PATH environment variable is set.  This may \n" \
	   "      produce binaries binaries incorrectly.  Please unset it \n" \
	   "      and start your build again. \n" \
	   "" >> $(ERROR_FILE)
endif

######################################################
# LD_LIBRARY_PATH_64 should not be set, unless you are insane.
######################################################
ld_library_path_64:
ifdef LD_LIBRARY_PATH_64
	@$(ECHO) "ERROR: Your LD_LIBRARY_PATH_64 environment variable is set.  This may \n" \
	   "      produce binaries binaries incorrectly.  Please unset it \n" \
	   "      and start your build again. \n" \
	   "" >> $(ERROR_FILE)
endif

######################################################
# LD_OPTIONS should not be set, unless you are insane.
######################################################
ld_options:
ifdef LD_OPTIONS
	@$(ECHO) "ERROR: Your LD_OPTIONS environment variable is set.  This may \n" \
	   "      produce binaries binaries incorrectly.  Please unset it \n" \
	   "      and start your build again. \n" \
	   "" >> $(ERROR_FILE)
endif

######################################################
# LD_RUN_PATH should not be set, unless you are insane.
######################################################
ld_run_path:
ifdef LD_RUN_PATH
	@$(ECHO) "ERROR: Your LD_RUN_PATH environment variable is set.  This may \n" \
	   "      produce binaries binaries incorrectly.  Please unset it \n" \
	   "      produce binaries binaries incorrectly.  Please unset it \n" \
	   "      and start your build again. \n" \
	   "" >> $(ERROR_FILE)
endif

######################################################
# MAKEFLAGS cannot be set, unless you are insane.
######################################################
makeflags:
ifdef MAKEFLAGS
	@#
	@# it is unacceptable to have the-e or --environment-overrides value in MAKEFLAGS
	@#
	@if [ `$(ECHO) $(MAKEFLAGS) | $(EGREP) -c '(^| )(e|--environment-overrides)( |$$)'` -ne 0 ]; then \
	  $(ECHO) "ERROR: Either the build was started with the flag -e or \n" \
	    "      --environment-overrides, or the MAKEFLAGS environment \n" \
	    "      variable has this value set.  This will cause any \n" \
	    "      environment variables you have defined to override \n" \
	    "      the values defined by the makefiles. This practice is \n" \
	    "      not recommemded by the authors of GNU Make, and \n" \
	    "      will lead to an improper build. \n" \
	    "      Please fix and restart the build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# it is unacceptable to havethe -i or --ignore-errors value in MAKEFLAGS
	@#
	@if [ `$(ECHO) $(MAKEFLAGS) | $(EGREP) -c '(^| )(i|--ignore-errors)( |$$)'` -ne 0 ]; then \
	  $(ECHO) "ERROR: Either the build was started with the flag -i or \n" \
	    "      --ignore-errors, or the MAKEFLAGS environment \n" \
	    "      variable has this value set. 1111 You will be unable \n" \
	    "      to determine if the build is broken or not. \n" \
	    "      Please fix and restart the build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# it is unacceptable to have the -I or --include-dir value in MAKEFLAGS
	@#
	@if [ `$(ECHO) $(MAKEFLAGS) | $(EGREP) -c '(^| )(I|--include-dir)( |$$)'` -ne 0 ]; then \
	  $(ECHO) "ERROR: Either the build was started with the flag -I or \n" \
	    "      --include-dir, or the MAKEFLAGS environment \n" \
	    "      variable has this value set.  This will render your \n" \
	    "      build questionable as not all the rules and depenencies \n" \
	    "      are captured by the build. \n" \
	    "      Please fix and restart the build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# it is unacceptable to have the -k or --keep-going value in MAKEFLAGS:
	@#
	@if [ `$(ECHO) $(MAKEFLAGS) | $(EGREP) -c '(^| )(k|--keep-going)( |$$)'` -ne 0 ]; then \
	  $(ECHO) "ERROR: Either the build was started with the flag -k or \n" \
	    "      --keep-going, or the MAKEFLAGS environment \n" \
	    "      variable has this value set. 222 You will be unable \n" \
	    "      to determine if the build is broken or not. \n" \
	    "      Please fix and restart the build.  \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# it is unacceptable to have the -o or --assume-old or --old-filevalue in MAKEFLAGS:
	@# Note - this rule never gets invoked because it is processed out
	@#        in GNU Make startup
	@#
	@if [ `$(ECHO) $(MAKEFLAGS) | $(EGREP) -c '(^| )(o|--assume-old|--old-file)( |$$)'` -ne 0 ]; then \
	  $(ECHO) "ERROR: Either the build was started with the flag -o or \n" \
	    "      --assume-old or --old-file, or the MAKEFLAGS environment \n" \
	    "      variable has this value set.  This could prevent the \n" \
	    "      build from executing rules it should, thus rendering a \n" \
	    "      questionable result. \n" \
	    "      Please fix and restart the build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# it is unacceptable to have the -r or --nobuiltin-rules value in MAKEFLAGS
	@#
	@if [ `$(ECHO) $(MAKEFLAGS) | $(EGREP) -c '(^| )(r|--no-builtin-rules)( |$$)'` -ne 0 ]; then \
	  $(ECHO) "ERROR: Either the build was started with the flag -r or \n" \
	    "      --no-builtin-rules, or the MAKEFLAGS environment \n" \
	    "      variable has this value set.  This may break the build \n" \
	    "      by not allowing builtin rules that may be required. \n" \
	    "      Please fix and restart the build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# it is unacceptable to have the -t or --touch value in MAKEFLAGS
	@# Note - this rule never gets invoked because it is processed out
	@#        in GNU Make startup
	@#
	@if [ `$(ECHO) $(MAKEFLAGS) | $(EGREP) -c '(^| )(t|--touch)( |$$)'` -ne 0 ]; then \
	  $(ECHO) "ERROR: Either the build was started with the flag -t or \n" \
	    "      --touch, or the MAKEFLAGS environment \n" \
	    "      variable has this value set.  This will leave the \n" \
	    "      build in a unclear state and could lead to not executing \n" \
	    "      rules which should be executed. \n" \
	    "      Please fix and restart the build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# show what is in MAKEFLAGS so the user is aware...
	@#
	@$(ECHO) "WARNING: Your MAKEFLAGS environment variable is set. \n" \
	   "        You should be very careful about the values set here. \n" \
	   "\n" \
	   "        MAKEFLAGS is set to =>$(MAKEFLAGS)<= \n" \
	   "" >> $(WARNING_FILE)
endif

######################################################
# if specified, ALT_OUTPUTDIR must point to non-relative path if set
######################################################
alt_outputdir:
ifdef ALT_OUTPUTDIR
	@if [ `$(ECHO) $(subst \,/,$(ALT_OUTPUTDIR)) | $(EGREP) -ci '^([a-z]:)?/'` -ne 1 ]; then \
	  $(ECHO) "ERROR: ALT_OUTPUTDIR must be an Absolute Path Name, \n" \
	    "      not a Relative Path Name. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  ifeq ($(PLATFORM), windows)
	@if [ `$(ECHO) $(subst \,/,$(ALT_OUTPUTDIR)) | $(EGREP) -ci '^([a-z]:)'` -ne 1 ]; then \
	  $(ECHO) "ERROR: On windows, ALT_OUTPUTDIR must contain the drive letter. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  endif
endif

######################################################
# OUTPUTDIR tests
######################################################
outputdir:
	@#
	@# OUTPUTDIR must be a directory...
	@#
	@if [ ! -d $(OUTPUTDIR) ]; then \
	  $(ECHO) "ERROR: OUTPUTDIR must be an existing directory. The current \n" \
	    "      value of OUTPUTDIR is \n" \
	    "          $(OUTPUTDIR) \n" \
	    "      Please check your value of ALT_OUTPUTDIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# OUTPUTDIR must be writeable by user...
	@#
	@if [ ! -w $(OUTPUTDIR) ]; then \
	  $(ECHO) "ERROR: You must have write permissions to OUTPUTDIR. The \n" \
	    "      current value of OUTPUTDIR is \n" \
	    "          $(OUTPUTDIR) \n" \
	    "      Either obtain these permissions or set ALT_OUTPUTDIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# OUTPUTDIR must have enough free space...
	@#
	@if [ -d $(OUTPUTDIR) -a $(FREE_SPACE) -lt $(MIN_FREE_DISK) ]; then \
	  $(ECHO) "WARNING: You may not have enough free space in your OUTPUTDIR. The \n" \
	    "        current value of OUTPUTDIR is \n" \
	    "            $(OUTPUTDIR) \n" \
	    "        You need "$(MIN_FREE_DISK)" bytes free on this device to build \n" \
	    "        and it appears that only "$(FREE_SPACE)" bytes are free. \n" \
	    "        Either obtain more space or set ALT_OUTPUTDIR to a larger disk. \n" \
	    "" >> $(WARNING_FILE) ; \
	fi

######################################################
# if specified, ALT_BOOTDIR must point to non-relative path if set
######################################################
alt_bootdir:
ifdef ALT_BOOTDIR
	@if [ `$(ECHO) $(subst \,/,$(ALT_BOOTDIR)) | $(EGREP) -ci '^([a-z]:)?/'` -ne 1 ]; then \
	  $(ECHO) "ERROR: ALT_BOOTDIR must be an Absolute Path Name, \n" \
	    "      not a Relative Path Name. \n" \
	    "      The current value of ALT_BOOTDIR is \n" \
	    "          $(ALT_BOOTDIR) \n" \
	    "      Please fix this and continue your build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif

######################################################
# BOOTDIR must point to a valid JDK.
######################################################
JAVA_VERSION_OK := $(shell $(ECHO) $(JAVA_VERSION) | $(EGREP) -c '^1.4.[1-9]')
bootdir:
	@if [ -x $(BOOTDIR)/bin/java$(EXE_SUFFIX) ]; then \
	  if [ $(JAVA_VERSION_OK) -ne 1 ]; then \
	    $(ECHO) "ERROR: Your BOOTDIR environment variable does not point \n" \
	      "      to a valid Java 2 SDK for bootstrapping this build. \n" \
	      "      A Java 2 SDK 1.4.2 build must be bootstrapped using  \n" \
	      "      J2SDK 1.4.1 fcs (or later). \n" \
	      "      Apparently, your bootstrap JDK is version $(JAVA_VERSION) \n" \
	      "      Please update your ALT_BOOTDIR setting and start your build again. \n" \
	      "" >> $(ERROR_FILE) ; \
	  fi \
	else \
	  $(ECHO) "ERROR: BOOTDIR does not point to a valid Java 2 SDK \n" \
	    "      Check that you have access to \n" \
	    "          $(BOOTDIR)/bin/java$(EXE_SUFFIX) \n" \
	    "      and/or check your value of ALT_BOOTDIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi

######################################################
# CACERTS_FILE must be absoulte path and readable
######################################################
cacerts:
  ifdef ALT_CACERTS_FILE
	@if [ `$(ECHO) $(subst \,/,$(ALT_CACERTS_FILE)) | $(EGREP) -ci '^([a-z]:)?/'` -ne 1 ]; then \
	  $(ECHO) "ERROR: ALT_CACERTS_FILE must be an Absolute Path Name, \n" \
	    "      not a Relative Path Name. \n" \
	    "      The current value of ALT_CACERTS_FILE is \n" \
	    "          $(ALT_CACERTS_FILE) \n" \
	    "      Please fix this and continue your build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  endif
	@#
	@# CACERTS_FILE must be readable
	@#
	@if [ ! -r $(subst \,/,$(CACERTS_FILE)) ]; then \
	  $(ECHO) "ERROR: You do not have access to a valid cacerts file. \n" \
	    "      Please check your access to \n" \
	    "          $(subst \,/,$(CACERTS_FILE)) \n" \
	    "      and/or check your value of ALT_CACERTS_FILE. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# CACERTS_FILE must be a file
	@#
	@if [ -d $(subst \,/,$(CACERTS_FILE)) ]; then \
	  $(ECHO) "ERROR: You do not have access to a valid cacerts file.\n" \
	    "      The value of CACERTS_FILE must point to a normal file.\n" \
	    "      Please check your access to \n" \
	    "          $(subst \,/,$(CACERTS_FILE)) \n" \
	    "      and/or check your value of ALT_CACERTS_FILE. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi

######################################################
# Check for existence of Motif in the bootstrap area
######################################################
motif:
ifeq ($(PLATFORM), solaris)
  ifdef BUILD_MOTIF12
	@if [ ! -r $(dir $(MOTIF_DIR))motif12/lib/libXm.so ]; then \
	  $(ECHO) "ERROR: You do not have access to a valid Motif 1.2 library. \n" \
	    "      Please check your access to \n" \
	    "          $(dir $(MOTIF_DIR))motif12/lib/libXm.so \n" \
	    "      and/or check your value of ALT_MOTIF_DIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi 
	@if [ ! -r $(dir $(MOTIF_DIR))motif12/include/Xm/CutPasteP.h ]; then \
	  $(ECHO) "ERROR: You do not have access to valid Motif 1.2 header files. \n" \
	    "      Please check your access to (for example) \n" \
	    "          $(dir $(MOTIF_DIR))motif12/include/Xm/CutPasteP.h \n" \
	    "      and/or check your value of ALT_MOTIF_DIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  endif
  ifdef BUILD_MOTIF21
	@if [ ! -r $(dir $(MOTIF_DIR))motif21/lib/libXm.so ]; then \
	  $(ECHO) "ERROR: You do not have access to a valid Motif 2.1 library. \n" \
	    "      Please check your access to \n" \
	    "          $(dir $(MOTIF_DIR))motif21/lib/libXm.so \n" \
	    "      and/or check your value of ALT_MOTIF_DIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@if [ ! -r $(dir $(MOTIF_DIR))motif21/include/Xm/AccColorT.h ]; then \
	  $(ECHO) "ERROR: You do not have access to valid Motif 2.1 header files. \n" \
	    "      Please check your access to (for example) \n" \
	    "          $(dir $(MOTIF_DIR))motif21/include/Xm/AccColorT.h \n" \
	    "      and/or check your value of ALT_MOTIF_DIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  endif
endif
ifeq ($(PLATFORM), linux)
	@if [ ! -r $(MOTIF_DIR)/lib/libXm.a ]; then \
	  $(ECHO) "ERROR: You do not have access to a valid Motif library. \n" \
	    "      Please check your access to \n" \
	    "          $(MOTIF_DIR)/lib/libXm.a \n" \
	    "      and/or check your value of ALT_MOTIF_DIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@if [ ! -r $(MOTIF_DIR)/include/Xm/AccColorT.h ]; then \
	  $(ECHO) "ERROR: You do not have access to valid Motif header files. \n" \
	    "      Please check your access to (for example) \n" \
	    "          $(MOTIF_DIR)/include/Xm/AccColorT.h \n" \
	    "      and/or check your value of ALT_MOTIF_DIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif

######################################################
# Check for existence of DEVTOOLS_PATH
######################################################
devtools_path:
	@if [ ! -r $(DEVTOOLS_PATH) ]; then \
	  $(ECHO) "ERROR: You do not have a valid DEVTOOLS_PATH setting. \n" \
	    "      Please check your access to \n" \
	    "          $(DEVTOOLS_PATH) \n" \
	    "      and/or check your value of ALT_DEVTOOLS_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi

######################################################
# Check for existence of msvcrt.dll and msvcrtd.dll
######################################################
msvcrt_path:
ifeq ($(PLATFORM), windows)
	@if [ ! -r $(MSVCRT_DLL_PATH)/msvcrt.dll ]; then \
	  $(ECHO) "ERROR: You do not have access to msvcrt.dll. \n" \
	    "      Please check your access to \n" \
	    "          $(MSVCRT_DLL_PATH) \n" \
	    "      and/or check your value of ALT_MSVCRT_DLL_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  ifeq ($(ARCH_DATA_MODEL), 64)
	@if [ ! -r $(MSVCRTD_DLL_PATH)/msvcrtd.dll ]; then \
	  $(ECHO) "ERROR: You do not have access to msvcrtd.dll. \n" \
	    "      Please check your access to \n" \
	    "          $(MSVCRTD_DLL_PATH) \n" \
	    "      and/or check your value of ALT_MSVCRTD_DLL_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  endif
endif

######################################################
# Check for existence of COMPILER_PATH
######################################################
compiler_path:
	@if [ ! -r $(COMPILER_PATH) ]; then \
	  $(ECHO) "ERROR: You do not have a valid COMPILER_PATH setting. \n" \
	    "      Please check your access to \n" \
	    "          $(COMPILER_PATH) \n" \
	    "      and/or check your value of ALT_COMPILER_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi

######################################################
# Check for existence of UNIXCOMMAND_PATH
######################################################
unixcommand_path:
	@if [ ! -r $(UNIXCOMMAND_PATH) ]; then \
	  $(ECHO) "ERROR: You do not have a valid UNIXCOMMAND_PATH setting. \n" \
	    "      Please check your access to \n" \
	    "          $(UNIXCOMMAND_PATH) \n" \
	    "      and/or check your value of ALT_UNIXCOMMAND_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi

  ######################################################
  # Check for existence of USRBIN_PATH on linux
  ######################################################
usrbin_path:
ifeq ($(PLATFORM), linux)
	@if [ ! -r $(USRBIN_PATH) ]; then \
	    $(ECHO) "ERROR: You do not have a valid USRBIN_PATH setting. \n" \
	      "      Please check your access to \n" \
	      "          $(USRBIN_PATH)  \n" \
	      "      and/or check your value of ALT_USRBIN_PATH. \n" \
	      "" >> $(ERROR_FILE) ; \
	  fi
endif

  ######################################################
  # Check for existence of UNIXCCS_PATH on solaris
  ######################################################
unixccs_path:
ifeq ($(PLATFORM), solaris)
	@if [ ! -r $(UNIXCCS_PATH) ]; then \
	  $(ECHO) "ERROR: You do not have a valid UNIXCCS_PATH setting. \n" \
	    "      Please check your access to \n" \
	    "          $(UNIXCCS_PATH) \n" \
	    "      and/or check your value of ALT_UNIXCCS_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	  fi
endif

######################################################
# Check for existence of ODBCDIR on solaris
######################################################
odbcdir:
ifeq ($(PLATFORM), solaris)
	@if [ ! -r $(ODBCDIR)/ISLIodbc/2.11/lib/libodbc.so ]; then \
	  $(ECHO) "ERROR: You do not have a valid ODBCDIR setting. \n" \
	    "      Please check your access to (for example) \n" \
	    "          $(ODBCDIR)/ISLIodbc/2.11/lib/libodbc.so \n" \
	    "      and/or check your value of ALT_ODBCDIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif

######################################################
# Check for existence of MSDEVTOOLS_PATH on windows
######################################################
msdevtools_path:
ifeq ($(PLATFORM), windows)
	@if [ ! -r $(MSDEVTOOLS_PATH) ]; then \
	  $(ECHO) "ERROR: You do not have a valid MSDEVTOOLS_PATH setting. \n" \
	    "      Please check your access to \n" \
	    "          $(MSDEVTOOLS_PATH) \n" \
	    "      and/or check your value of ALT_MSDEVTOOLS_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif

######################################################
# Check for existence of Hotspot binaries
######################################################
hotspot_binaries:
ifneq ($(ARCH_DATA_MODEL), 64)
	@# There is no 64-bit HotSpot client VM
	@if [ ! -r $(HOTSPOT_CLIENT_PATH)/$(LIB_PREFIX)jvm.$(LIBRARY_SUFFIX) ]; then \
	  $(ECHO) "ERROR: HOTSPOT_CLIENT_PATH does not point to a valid HotSpot VM. \n" \
	    "      Please check your access to \n" \
	    "          $(HOTSPOT_CLIENT_PATH)/$(LIB_PREFIX)jvm.$(LIBRARY_SUFFIX) \n" \
	    "      and/or check your value of ALT_HOTSPOT_CLIENT_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@if [ ! -r $(HOTSPOT_CLIENT_PATH)/$(LIB_PREFIX)jvm_g.$(LIBRARY_SUFFIX) ]; then \
	  $(ECHO) "ERROR: HOTSPOT_CLIENT_PATH does not point to a valid HotSpot debug VM. \n" \
	    "      Please check your access to \n" \
	    "          $(HOTSPOT_CLIENT_PATH)/$(LIB_PREFIX)jvm_g.$(LIBRARY_SUFFIX) \n" \
	    "      and/or check your value of ALT_HOTSPOT_CLIENT_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif
	@if [ ! -r $(HOTSPOT_SERVER_PATH)/$(LIB_PREFIX)jvm.$(LIBRARY_SUFFIX) ]; then \
	  $(ECHO) "ERROR: HOTSPOT_SERVER_PATH does not point to a valid HotSpot VM. \n" \
	    "      Please check your access to \n" \
	    "          $(HOTSPOT_SERVER_PATH)/$(LIB_PREFIX)jvm.$(LIBRARY_SUFFIX) \n" \
	    "      and/or check your value of ALT_HOTSPOT_SERVER_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@if [ ! -r $(HOTSPOT_SERVER_PATH)/$(LIB_PREFIX)jvm_g.$(LIBRARY_SUFFIX) ]; then \
	  $(ECHO) "ERROR: HOTSPOT_SERVER_PATH does not point to a valid HotSpot debug VM. \n" \
	    "      Please check your access to \n" \
	    "          $(HOTSPOT_SERVER_PATH)/$(LIB_PREFIX)jvm_g.$(LIBRARY_SUFFIX) \n" \
	    "      and/or check your value of ALT_HOTSPOT_SERVER_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# Check value of HOTSPOT_LIB_PATH
	@#
ifeq ($(PLATFORM), windows)
	@if [ ! -r $(HOTSPOT_LIB_PATH)/jvm.lib -o ! -r $(HOTSPOT_LIB_PATH)/jvm_g.lib ]; then \
	  $(ECHO) "ERROR: HOTSPOT_LIB_PATH does not point to a valid HotSpot library. \n" \
	    "      Please check your access to \n" \
	    "          $(HOTSPOT_LIB_PATH)/jvm.lib \n" \
            "        and/or \n" \
	    "          $(HOTSPOT_LIB_PATH)/jvm_g.lib \n" \
	    "      and/or check your value of ALT_HOTSPOT_LIB_PATH. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# Check for the .map files - its OK if they are not there..
	@#
  ifneq ($(ARCH_DATA_MODEL), 64)
	@# There is no 64-bit HotSpot client VM
	@if [ ! -r $(HOTSPOT_CLIENT_PATH)/jvm.map -o ! -r $(HOTSPOT_CLIENT_PATH)/jvm_g.map ]; then \
	  $(ECHO) "WARNING: HOTSPOT_CLIENT_PATH does not point to valid HotSpot .map files. \n" \
	    "        These files are optional and aid in the debugging of the JVM. \n" \
	    "        Please check your access to \n" \
	    "          $(HOTSPOT_CLIENT_PATH)/jvm.map \n" \
            "        and/or \n" \
	    "          $(HOTSPOT_CLIENT_PATH)/jvm_g.map \n" \
	    "        and/or check your value of ALT_HOTSPOT_CLIENT_PATH. \n" \
	    "" >> $(WARNING_FILE) ; \
	fi
	@if [ ! -r $(HOTSPOT_CLIENT_PATH)/jvm.pdb -o ! -r $(HOTSPOT_CLIENT_PATH)/jvm_g.pdb ]; then \
	  $(ECHO) "WARNING: HOTSPOT_CLIENT_PATH does not point to valid HotSpot .pdb files. \n" \
	    "        These files are optional and aid in the debugging of the JVM. \n" \
	    "        Please check your access to \n" \
	    "          $(HOTSPOT_CLIENT_PATH)/jvm.pdb \n" \
            "        and/or \n" \
	    "          $(HOTSPOT_CLIENT_PATH)/jvm_g.pdb \n" \
	    "        and/or check your value of ALT_HOTSPOT_CLIENT_PATH. \n" \
	    "" >> $(WARNING_FILE) ; \
	fi
  endif
	@if [ ! -r $(HOTSPOT_SERVER_PATH)/jvm.map -o ! -r $(HOTSPOT_SERVER_PATH)/jvm_g.map ]; then \
	  $(ECHO) "WARNING: HOTSPOT_SERVER_PATH does not point to valid HotSpot .map files. \n" \
	    "        These files are optional and aid in the debugging of the JVM. \n" \
	    "        Please check your access to \n" \
	    "          $(HOTSPOT_SERVER_PATH)/jvm.map \n" \
            "        and/or \n" \
	    "          $(HOTSPOT_SERVER_PATH)/jvm_g.map \n" \
	    "        and/or check your value of ALT_HOTSPOT_SERVER_PATH. \n" \
	    "" >> $(WARNING_FILE) ; \
	fi
	@if [ ! -r $(HOTSPOT_SERVER_PATH)/jvm.pdb -o ! -r $(HOTSPOT_SERVER_PATH)/jvm_g.pdb ]; then \
	  $(ECHO) "WARNING: HOTSPOT_SERVER_PATH does not point to valid HotSpot .pdb files. \n" \
	    "        These files are optional and aid in the debugging of the JVM. \n" \
	    "        Please check your access to \n" \
	    "          $(HOTSPOT_SERVER_PATH)/jvm.pdb \n" \
            "        and/or \n" \
	    "          $(HOTSPOT_SERVER_PATH)/jvm_g.pdb \n" \
	    "        and/or check your value of ALT_HOTSPOT_SERVER_PATH. \n" \
	    "" >> $(WARNING_FILE) ; \
	fi
endif	

######################################################
# Check the zip file version
######################################################
zip_version:
	@#
	@# Check the zip file version
	@#
	@if [ -r $(ZIPEXE) ]; then \
	  if [ `$(ECHO) $(ZIP_VER) | $(EGREP) -c '$(REQUIRED_ZIP_VER)'` -ne 1 ]; then \
	    $(ECHO) "WARNING: The zip file version must be $(REQUIRED_ZIP_VER). \n" \
	      "      You are using the following zip file version: $(ZIP_VER) \n" \
	      "      The zip file was obtained from the following location: \n" \
	      "          $(ZIPEXE) \n" \
	      "      Please change your zip file. \n" \
	      "" >> $(WARNING_FILE) ; \
	  fi \
	else \
	  $(ECHO) "ERROR: There is no zip file at the location: \n" \
	    "      $(ZIPEXE) \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
ifeq ($(PLATFORM), windows)
	@#
	@# Check the unzip file version
	@#
	@if [ -r $(UNZIP) ]; then \
	  if [ `$(ECHO) $(UNZIP_VER) | $(EGREP) -c '$(REQUIRED_UNZIP_VER)'` -ne 1 ]; then \
	    $(ECHO) "WARNING: The unzip file version must be $(REQUIRED_UNZIP_VER). \n" \
	      "      You are using the following unzip file version: $(UNZIP_VER) \n" \
	      "      The Unzip file was obtained from the following location: \n" \
	      "          $(UNZIP) \n" \
	      "      Please change your unzip file. \n" \
	      "" >> $(WARNING_FILE) ; \
	  fi \
	else \
	  $(ECHO) "ERROR: There is no unzip file at the location: \n" \
	    "      $(UNZIP) \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif

######################################################
# Check for windows DirectX sdk directory
######################################################
dxsdk:
ifeq ($(PLATFORM), windows)
	@if [ ! -r $(DXSDK_INCLUDE_PATH)/ddraw.h  ]; then \
	$(ECHO) "ERROR: You do not have access to a valid DirectX SDK Include dir.\n" \
	  "      The value of DXSDK_INCLUDE_PATH must point a valid DX SDK dir.\n" \
	  "      Please check your access to \n" \
	  "          $(DXSDK_INCLUDE_PATH) \n" \
	  "      and/or check your value of ALT_DXSDK_PATH or ALT_DXSDK_INCLUDE_PATH.\n" \
	  "      Microsoft DirectX 7 SDK can be downloaded from the following location:\n" \
	  "          http://download.microsoft.com/download/win98SE/SDK/7.0/W9X/EN-US/dx7sdk-700.1.exe\n" \
	  "      Or  http://www.microsoft.com/directx\n" \
	  "" >> $(ERROR_FILE) ; \
	else \
	  if [ ! "$(DXSDK_VER)" = "$(REQUIRED_DXSDK_VER)" ]; then \
	  $(ECHO) "ERROR: The DirectX SDK must be version $(REQUIRED_DXSDK_VER).\n" \
	    "      You are using the following DirectX SDK version: $(DXSDK_VER)\n" \
	    "      The DirectX SDK was obtained from the following location: \n" \
	    "          $(DXSDK_PATH) \n" \
	    "      Please change your DirectX SDK. \n" \
	    "      Microsoft DirectX 7 SDK can be downloaded from the following location:\n" \
	    "          http://download.microsoft.com/download/win98SE/SDK/7.0/W9X/EN-US/dx7sdk-700.1.exe\n" \
	    "      Or  http://www.microsoft.com/directx\n" \
	    "" >> $(ERROR_FILE) ; \
	  else \
	    if [ -r $(DXSDK_INCLUDE_PATH)/basetsd.h ]; then \
              if [ `$(EGREP) -c __int3264 $(DXSDK_INCLUDE_PATH)/basetsd.h` -ne 0 ]; then \
	      $(ECHO) "ERROR: The DirectX SDK Include directory contains a newer basetsd.h,\n" \
		"      which may indicate that you're using a newer DirectX SDK.\n" \
		"      This will result in a build failure.\n" \
		"      The DirectX SDK Include dir was obtained from the following location:\n" \
		" 	  $(DXSDK_INCLUDE_PATH) \n" \
		"      Please change your DirectX SDK to version 7.\n" \
	        "      Microsoft DirectX 7 SDK can be downloaded from the following location:\n" \
	        "          http://download.microsoft.com/download/win98SE/SDK/7.0/W9X/EN-US/dx7sdk-700.1.exe\n" \
		"      Or  http://www.microsoft.com/directx\n" \
  		"" >> $(ERROR_FILE) ; \
	      fi \
	    fi \
	  fi \
	fi
endif

######################################################
# Check the compiler version(s)
######################################################
compiler:
ifeq ($(PLATFORM), windows)
  ifeq ($(ARCH_DATA_MODEL), 32)
	@#
	@# Check windows compiler type
	@#
	@if [ ! "x$(CC_TYPE)" = "x$(REQUIRED_CCTYPE)" ]; then \
	  $(ECHO) "ERROR: To build Java 2 SDK 1.4 you need : \n" \
	    "      $(COMPILER_NAME) - cl.exe type \"$(REQUIRED_CCTYPE)\" \n" \
	    "      You are using Compiler type \"$(CC_TYPE)\"  \n" \
	    "      Please install the required version of Visual C++ and start your build again. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  endif
	@#
	@# Check the version of Visual C++ cl.exe by parsing off the version number from the banner
	@#
	@if [ ! "x$(CC_VER)" = "x$(REQUIRED_CCVER)" ]; then \
	  $(ECHO) "ERROR: To build Java 2 SDK 1.4 you need : \n" \
	    "      $(COMPILER_NAME) - cl.exe version \"$(REQUIRED_CCVER)\" \n" \
	    "      You are using Compiler version \"$(CC_VER)\"  \n" \
	    "      Please install the required version of Visual C++ and start your build again. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@#
	@# Check the version of Visual C++ link.exe by parsing off the version number from the banner
	@#
	@if [ ! "x$(LINK_VER)" = "x$(REQUIRED_LINKVER)" ]; then \
	  $(ECHO) "ERROR: To build Java 2 SDK 1.4 you need : \n" \
	    "      $(COMPILER_NAME) - link.exe version \"$(REQUIRED_LINKVER)\" \n" \
	    "      You are using Linker version \"$(LINK_VER)\" \n" \
	    "      Please install the required version of Visual C++ and start your build again. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif # PLATFORM
ifeq ($(PLATFORM), solaris)
	@#
	@# On Solaris we need version 5.2 of the compilers (which is part
	@# of Sun WorkShop 6 update 1).
	@#
	@if [ -r $(CC) ]; then \
	  if [ "$(CC_VER)" != 5.2 ]; then \
	    $(ECHO) "ERROR: The Solaris compiler version must be 5.2. \n" \
	      "      You are using the following compiler version: $(CC_VER) \n" \
	      "      The compiler was obtained from the following location: \n" \
	      "          $(COMPILER_PATH) \n" \
	      "      Please change your compiler. \n" \
	      "" >> $(ERROR_FILE) ; \
	  fi \
	else \
	  $(ECHO) "ERROR: There is no Solaris C compiler at the location: \n" \
	    "      $(COMPILER_PATH) \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif
ifeq ($(PLATFORM), linux)
	@#
	@# check gcc version
	@#
	@if [ -r $(CC) ]; then \
	  if [ `$(ECHO) $(CC_VER) | $(EGREP) -c '$(REQUIRED_GCC_VER)'` -ne 1 ]; then \
	    $(ECHO) "ERROR: The Linux GCC compiler must be version $(REQUIRED_GCC_VER). \n" \
	      "      You are using the following compiler version: $(CC_VER) \n" \
	      "      The compiler was obtained from the following location: \n" \
	      "          $(COMPILER_PATH) \n" \
	      "      Please change your compiler. \n" \
	      "" >> $(ERROR_FILE) ; \
	  fi \
	else \
	  $(ECHO) "ERROR: There is no GNU CC compiler at the location: \n" \
	    "         $(COMPILER_PATH) \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif

######################################################
# Check that ALSA headers and libs are installed and 
# that the header has the right version. We only
# need /usr/include/alsa/*.h and /usr/lib/libasound.so
######################################################
alsa-versioncheck:
ifeq ($(PLATFORM), linux)
ifeq ($(ARCH_DATA_MODEL), 32)
	@# create a mini C program that links against libasound and prints ALSA's version
	@if [ -f $(ALSA_VERSION_CHECK) ] ; then \
	  $(RM) $(ALSA_VERSION_CHECK) ; \
	fi ; \
	$(ECHO) "#include <alsa/asoundlib.h>\n" \
	         "int main(char** argv, int argc) {\n" \
	         "  printf(\"%s\", SND_LIB_VERSION_STR);\n" \
	         "  return 0;\n" \
	         "}\n" \
	         "" > $(ALSA_VERSION_CHECK).c ; \
	$(CC) -lasound -o $(ALSA_VERSION_CHECK) $(ALSA_VERSION_CHECK).c > /dev/null 2>&1 ; \
	$(RM) $(ALSA_VERSION_CHECK).c
endif
endif

alsa-headers: alsa-versioncheck
ifeq ($(PLATFORM), linux)
ifeq ($(ARCH_DATA_MODEL), 32)
	@if [ -f $(ALSA_VERSION_CHECK) ]; then \
	  if [ `$(ALSA_VERSION_CHECK) | $(EGREP) -c '$(REQUIRED_ALSA_VERSION)'` -ne 1 ] ; then \
	    $(ECHO) "ERROR: The ALSA version must be 0.9.0rc5 or higher. \n" \
	      "      You have the following ALSA version installed: $(ALSA_VERSION) \n" \
	      "      Please reinstall ALSA (drivers and lib). You can download \n" \
	      "      the source distribution from http://www.alsa-project.org \n" \
	      "      or go to http://www.freshrpms.net/docs/alsa/ for precompiled RPM packages. \n" \
	      "" >> $(ERROR_FILE) ; \
	  fi \
	else \
	  $(ECHO) "ERROR: You seem to not have installed ALSA 0.9.0rc5 or higher. \n" \
	  "      Please install ALSA (drivers and lib). You can download the \n" \
	  "      source distribution from http://www.alsa-project.org or go to \n" \
	  "      http://www.freshrpms.net/docs/alsa/ for precompiled RPM packages. \n" \
	  "" >> $(ERROR_FILE) ; \
	fi
endif
endif
