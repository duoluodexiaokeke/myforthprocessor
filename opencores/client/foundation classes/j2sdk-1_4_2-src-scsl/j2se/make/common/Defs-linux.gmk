#
# Copyright 2003 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

#
# @(#)Defs-linux.gmk	1.94 03/01/23
#
# Makefile to specify compiler flags for programs and libraries
# targeted to Linux.  Should not contain any rules.
#

# Warning: the following variables are overriden by Defs.gmk. Set
# values will be silently ignored:
#   CFLAGS        (set $(OTHER_CFLAGS) instead)
#   CPPFLAGS      (set $(OTHER_CPPFLAGS) instead)
#   CXXFLAGS      (set $(OTHER_CXXFLAGS) instead)
#   LCFLAGS       (set $(OTHER_CFLAGS) instead)
#   LCPPFLAGS     (set $(OTHER_CPPFLAGS) instead)
#   LDFLAGS       (set $(OTHER_LDFAGS) instead)
#   LDLIBS        (set $(EXTRA_LIBS) instead)
#   LDLIBS_COMMON (set $(EXTRA_LIBS) instead)
#   LINTFLAGS     (set $(OTHER_LINTFLAGS) instead)

# statically link libstdc++ before C++ ABI is stablized on Linux
STATIC_CXX     = true

# define these to avoid picking up ones from aliases or from
# non-standard locations
#

AR             = $(USRBIN_PATH)ar
BASENAME       = $(UNIXCOMMAND_PATH)basename
CAT            = $(UNIXCOMMAND_PATH)cat
CC             = $(COMPILER_PATH)gcc
CPP            = $(COMPILER_PATH)gcc -E
ifeq ($(STATIC_CXX),true)
# g++ always dynamically links libstdc++, even we use "-Wl,-Bstatic -lstdc++"
# We need to use gcc to statically link the C++ runtime. gcc and g++ use
# the same subprocess to compile C++ files, so it is OK to build using gcc.
CXX            = $(COMPILER_PATH)gcc
else
CXX            = $(COMPILER_PATH)g++
endif
CD             = cd # intrinsic unix command
CHMOD          = $(UNIXCOMMAND_PATH)chmod
CMP            = $(USRBIN_PATH)cmp
COMPRESS       = $(USRBIN_PATH)compress
CP             = $(UNIXCOMMAND_PATH)cp
CPIO           = $(UNIXCOMMAND_PATH)cpio
CUT            = $(USRBIN_PATH)cut
DATE           = $(UNIXCOMMAND_PATH)date
DF             = $(UNIXCOMMAND_PATH)df
DIFF           = $(USRBIN_PATH)diff
DIRNAME        = $(USRBIN_PATH)dirname
ECHO           = echo -e # intrinsic unix command, with backslash-escaped character interpretation 
EGREP          = $(UNIXCOMMAND_PATH)egrep
EXPR           = $(USRBIN_PATH)expr
FIND           = $(USRBIN_PATH)find
HEAD           = $(USRBIN_PATH)head
GDB            = $(USRBIN_PATH)gdb
GREP           = $(UNIXCOMMAND_PATH)grep
GUNZIP         = $(UNIXCOMMAND_PATH)gunzip
LEX            = $(USRBIN_PATH)lex
LN             = $(UNIXCOMMAND_PATH)ln
LS             = $(UNIXCOMMAND_PATH)ls
M4             = $(USRBIN_PATH)m4
MKDIR          = $(UNIXCOMMAND_PATH)mkdir
MV             = $(UNIXCOMMAND_PATH)mv
NAWK           = $(USRBIN_PATH)gawk
PWD            = $(UNIXCOMMAND_PATH)pwd
#RM   is defined by GNU Make as 'rm -f'
RMDIR          = $(UNIXCOMMAND_PATH)rmdir
RPM            = $(UNIXCOMMAND_PATH)rpm
SED            = $(UNIXCOMMAND_PATH)sed
SH             = $(UNIXCOMMAND_PATH)sh
SORT           = $(UNIXCOMMAND_PATH)sort
STRIP          = $(USRBIN_PATH)strip
TAR            = $(UNIXCOMMAND_PATH)tar
TEST	       = $(USRBIN_PATH)test
TOUCH          = $(UNIXCOMMAND_PATH)touch
TR             = $(USRBIN_PATH)tr
TRUE           = $(UNIXCOMMAND_PATH)true
UNAME          = $(UNIXCOMMAND_PATH)uname
UNIQ           = $(USRBIN_PATH)uniq
UNZIPSFX       = $(USRBIN_PATH)unzipsfx
YACC           = $(USRBIN_PATH)yacc
ZIPEXE         = $(USRBIN_PATH)zip


archExpr = case "`$(UNAME) -m`" in  \
		i[3-6]86) \
		    $(ECHO) i586 \
		    ;; \
		ia64) \
		    $(ECHO) ia64 \
		    ;; \
		sparc*)  \
		    $(ECHO) sparc \
		    ;; \
		*) \
		    $(UNAME) -m  \
		    ;; \
	esac

ARCH        := $(shell $(archExpr) )
ARCH_FAMILY = $(ARCH)
OS_VERSION = $(shell $(UNAME) -r)
OS_NAME = linux

#
# Linux builds may be 32-bit or 64-bit data model. Select
# the default based on the build platform architecture.
#
ifndef ARCH_DATA_MODEL
  ifeq ($(ARCH), i586)
    ARCH_DATA_MODEL=32
  else
    ARCH_DATA_MODEL=64
  endif
endif

#
# Need to maintain the jre/lib/i386 location for 32-bit Intel
#
ifeq ($(ARCH), i586)
  LIBARCH = i386
else
  LIBARCH = $(ARCH)
endif

# UNIXCOMMAND_PATH is the path to where the most common Unix
# commands are installed.
UNIXCOMMAND_PATH = /bin/
# Allow the user to override the default value...
ifdef ALT_UNIXCOMMAND_PATH
# make sure that there is a "/" on the end...
UNIXCOMMAND_PATH = $(subst //,/,$(ALT_UNIXCOMMAND_PATH)/)
endif

# USRBIN_PATH is the path to where the most common Unix
# commands are installed.
USRBIN_PATH = /usr/bin/
# Allow the user to override the default value...
ifdef ALT_USRBIN_PATH
# make sure that there is a "/" on the end...
USRBIN_PATH = $(subst //,/,$(ALT_USRBIN_PATH)/)
endif

# COMPILER_PATH is the path to where the compiler and tools 
# are installed.
COMPILER_PATH = /usr/bin/
#
# Allow the user to override the default value...
ifdef ALT_COMPILER_PATH
COMPILER_PATH = $(subst //,/,$(subst \,/,$(ALT_COMPILER_PATH))/)
endif

# DEVTOOLS_PATH is for other tools required for building (such as
# zip, etc.)
DEVTOOLS_PATH = /java/devtools/$(PLATFORM)/bin/
# Allow the user to override the default value...
ifdef ALT_DEVTOOLS_PATH
DEVTOOLS_PATH = $(subst //,/,$(ALT_DEVTOOLS_PATH)/)
endif

override CC_VERSION              = gcc
CC_DEPEND	 = -MM
CC_DEPEND_FILTER = $(SED) -e 's!$*\.o!$(dir $@)&!g'

# where is unwanted output to be delivered?
DEV_NULL = /dev/null
export DEV_NULL

CLASSPATH_SEPARATOR = :

ifndef PLATFORM_SRC
# PLATFORM_SRC may be set by .../ext/*/build/.../Defs.gmk
PLATFORM_SRC = $(TOPDIR)/src/solaris
endif # PLATFORM_SRC

# platform specific include files
PLATFORM_INCLUDE  = $(INCLUDEDIR)/$(PLATFORM)

#
# Default BOOTDIR
#
_BOOTDIR = /java/re/j2se/$(PREVIOUS_JDK_VERSION)/archive/fcs/binaries/$(PLATFORM)-$(ARCH)

#
# Default Hotspot dirs
#
_HOTSPOT_CLIENT_PATH = /java/re/j2se/$(JDK_VERSION)/promoted/latest/binaries/$(PLATFORM)-$(ARCH)/jre/lib/$(LIBARCH)/client
_HOTSPOT_SERVER_PATH = /java/re/j2se/$(JDK_VERSION)/promoted/latest/binaries/$(PLATFORM)-$(ARCH)/jre/lib/$(LIBARCH)/server

#
# Default Previous jre and jdk bundle path
# 
_PREVIOUS_JDK_FILE = j2sdk-$(PREVIOUS_JDK_UNDERSCORE_VERSION)-$(PLATFORM)-$(ARCH).tar.gz
_PREVIOUS_JRE_FILE = j2re-$(PREVIOUS_JDK_UNDERSCORE_VERSION)-$(PLATFORM)-$(ARCH).tar.gz
_PREVIOUS_RELEASE_PATH = /java/re/j2se/$(PREVIOUS_JDK_VERSION)/archive/fcs/bundles/$(PLATFORM)-$(ARCH)
PREVIOUS_JRE_BUNDLE = $(PREVIOUS_RELEASE_PATH)/$(PREVIOUS_JRE_FILE)
PREVIOUS_JDK_BUNDLE = $(PREVIOUS_RELEASE_PATH)/$(PREVIOUS_JDK_FILE)

# suffix used for object file (.o for unix .obj for windows)
OBJECT_SUFFIX = o
# The suffix applied to runtime libraries
LIBRARY_SUFFIX = so
# The suffix applied to link libraries
LIB_SUFFIX = so
# The suffix applied to the library name for FDLIBM
FDDLIBM_SUFFIX = a
# The suffix applied to executables (.exe for windows, nothing for solaris)
EXE_SUFFIX =
# The suffix applied to scripts (.bat for windows, nothing for unix)
SCRIPT_SUFFIX =
# The prefix applied to library files (lib for solaris, nothing for windows)
LIB_PREFIX = lib
# CC compiler object code output directive flag value
CC_OBJECT_OUTPUT_FLAG = -o #trailing blank required!

#
# Default HPI libraries. Build will build only native, unless
# overriden at the make command line. This makes it convenient for
# people doing, say, a pthreads port -- they can create a posix
# directory here, and say "gnumake HPIS=posix" at the top
# level.
#
HPIS = native

#
# Java default optimization (-x04/-O3) etc.  Applies to the VM.
#
CC_HIGHER_OPT =
CC_LOWER_OPT  =
ifeq ($(PRODUCT), java)
    _OPT = $(CC_HIGHER_OPT)
else
    CPPFLAGS_DBG    += -DLOGGING 
endif

#
# If -Xa is in CFLAGS_COMMON it will end up ahead of $(POPT) for the
# optimized build, and that ordering of the flags completely freaks
# out cc.  Hence, -Xa is instead in each CFLAGS variant.
#
# The extra options to the C++ compiler prevent it from:
#   - adding runpath (dump -Lv) to *your* C++ compile install dir
#   - adding stubs to various things such as thr_getspecific (hence -nolib)
#   - creating Templates.DB in current directory (arch specific)
#
GCC_INHIBIT	= -Wno-unused -Wno-parentheses
GCC_STYLE	= 
GCC_WARNINGS	= -W -Wall $(GCC_STYLE) $(GCC_INHIBIT)
ifeq ($(ARCH),ppc)
CFLAGS_COMMON   = -fPIC -fsigned-char $(GCC_WARNINGS)
else # ARCH
CFLAGS_COMMON   = -fno-strict-aliasing -fPIC $(GCC_WARNINGS)
endif # ARCH
CFLAGS_OPT      = $(POPT)
CFLAGS_DBG      = -g
CXXFLAGS_COMMON = $(GCC_WARNINGS)
CXXFLAGS_OPT	= $(POPT)
CXXFLAGS_DBG	= -g

CPPFLAGS_COMMON = -D$(ARCH) -DARCH='"$(ARCH)"' -DLINUX $(VERSION_DEFINES) \
		  -D_LARGEFILE64_SOURCE -D_GNU_SOURCE -D_REENTRANT \
		  -D_LITTLE_ENDIAN 

ifeq ($(ARCH_DATA_MODEL), 64)
CPPFLAGS_COMMON += -D_LP64=1
endif

CPPFLAGS_OPT    = 
CPPFLAGS_DBG    = -DDEBUG

EXTRA_LIBS += -lc

ifneq ($(LIBRARY),JdbcOdbc)
ifneq ($(ARCH),ppc)
ifneq ($(ARCH),ia64)
LDFLAGS_COMMON  = -z defs
endif
endif # LIBRARY
endif # ARCH

#
# -L paths for finding and -ljava
#
LDFLAGS_COMMON += -L$(LIBDIR)/$(LIBARCH)
LDFLAGS_OPT     =
LDFLAGS_DBG     =

#
# -static-libgcc is a gcc-3 flag to statically link libgcc, gcc-2.9x always
# statically link libgcc but will print a warning with the flag. We don't 
# want the warning, so check gcc version first.
#
CC_VER_MAJOR := $(shell $(CC) -dumpversion | $(SED) 's/egcs-//' | $(CUT) -d'.' -f1)
ifeq ("$(CC_VER_MAJOR)", "3")
OTHER_LDFLAGS  += -static-libgcc
endif

#
# Post Processing of libraries/executables
#
ifeq ($(VARIANT), OPT)
  POST_PROCESS=	$(STRIP) $@ ;
endif

# javac Boot Flags
JAVAC_BOOT_FLAGS = -J-Xmx128m 

#
# Use: ld $(LD_MAPFILE_FLAG) mapfile *.o
#
LD_MAPFILE_FLAG = -Xlinker --version-script -Xlinker

#
# Lint support.
#
ifdef LIBRARY
LINTFLAGS_COMMON = -errfmt=simple -olib$(LIBRARY) -v -Ncheck -Nlevel=3
endif

ifdef PROGRAM
LINTFLAGS_COMMON = -errfmt=simple -v -Ncheck -Nlevel=4
endif

#
# Support for Quantify.
#
ifdef QUANTIFY
QUANTIFY_CMD = quantify
QUANTIFY_OPTIONS = -cache-dir=/tmp/quantify -always-use-cache-dir=yes
LINK_PRE_CMD = $(QUANTIFY_CMD) $(QUANTIFY_OPTIONS)
ifdef LIBRARY
CFLAGS_COMMON += -K PIC
endif
endif

#
# Path and option to link against the VM, if you have to.  Note that
# there are libraries that link against only -ljava, but they do get
# -L to the -ljvm, this is because -ljava depends on -ljvm, whereas
# the library itself should not.
#
VM_NAME         = server
JVMLIB          = -L$(LIBDIR)/$(LIBARCH)/$(VM_NAME) -ljvm$(SUFFIX)
JAVALIB         = -ljava$(SUFFIX) $(JVMLIB)

#
# We want to privatize JVM symbols on Solaris. This is so the user can
# write a function called FindClass and this should not override the 
# FindClass that is inside the JVM. At this point in time we are not
# concerned with other JNI libraries because we hope that there will
# not be as many clashes there.
#
PRIVATIZE_JVM_SYMBOLS = false

USE_PTHREADS = true
override ALT_CODESET_KEY         = _NL_CTYPE_CODESET_NAME
override AWT_RUNPATH             =
override HAVE_ALTZONE            = false
override HAVE_DGA                = false
override HAVE_FILIOH             = false
override HAVE_GETHRTIME          = false
override HAVE_GETHRVTIME         = false
override HAVE_SIGIGNORE          = true
override LEX_LIBRARY             = -lfl
ifeq ($(STATIC_CXX),true)
override LIBCXX                  = -Wl,-Bstatic -lstdc++ -Wl,-Bdynamic
else
override LIBCXX                  =
endif
override LIBPOSIX4               =
override LIBSOCKET               =
override LIBTHREAD               =
override MOOT_PRIORITIES         = true
override NO_INTERRUPTIBLE_IO     = true
override OPENWIN_HOME            = /usr/X11R6
override OPENWIN_LIB             = $(OPENWIN_HOME)/lib
override OTHER_M4FLAGS           = -D__GLIBC__ -DGNU_ASSEMBLER
override SUN_CMM_SUBDIR          =
override THREADS_FLAG            = native
override USE_GNU_M4              = true
override USING_GNU_TAR           = true
override WRITE_LIBVERSION        = false

# USE_EXECNAME forces the launcher to look up argv[0] on $PATH, and put the
# resulting resolved absolute name of the executable in the environment
# variable EXECNAME.  That executable name is then used that to locate the
# installation area.
override USE_EXECNAME            = true

# If your platform has DPS, it will have Type1 fonts too, in which case
# it is best to enable DPS support until such time as 2D's rasteriser
# can fully handle Type1 fonts in all cases. Default is "yes".
# HAVE_DPS should only be "no" if the platform has no DPS headers or libs
# DPS (Displayable PostScript) is available on Solaris machines
HAVE_DPS = no

#
# Motif settings
#
STATIC_MOTIF=true
LIBM=-lm

# where to get motif for linux...
ifeq ($(ARCH_DATA_MODEL), 32)
  MOTIF_DIR=/java/devtools/linux/motif
else
  MOTIF_DIR=/java/devtools/linux/motif64
endif

ifdef ALT_MOTIF_DIR
  MOTIF_DIR = $(ALT_MOTIF_DIR)
endif
MOTIF_LIB = $(MOTIF_DIR)/lib

#
# Japanese manpages
#
JA_SOURCE_ENCODING = eucJP
JA_TARGET_ENCODINGS = eucJP
