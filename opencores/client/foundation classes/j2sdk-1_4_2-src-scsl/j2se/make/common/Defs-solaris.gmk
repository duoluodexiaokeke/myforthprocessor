#
# Copyright 2003 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

#
# @(#)Defs-solaris.gmk	1.197 03/01/23
#
# Makefile to specify compiler flags for programs and libraries
# targeted to Solaris.  Should not contain any rules.
#

# Warning: the following variables are overridden by Defs.gmk. Set
# values will be silently ignored:
#   CFLAGS        (set $(OTHER_CFLAGS) instead)
#   CPPFLAGS      (set $(OTHER_CPPFLAGS) instead)
#   CXXFLAGS      (set $(OTHER_CXXFLAGS) instead)
#   LCFLAGS       (set $(OTHER_CFLAGS) instead)
#   LCPPFLAGS     (set $(OTHER_CPPFLAGS) instead)
#   LDFLAGS       (set $(OTHER_LDFAGS) instead)
#   LDLIBS        (set $(EXTRA_LIBS) instead)
#   LDLIBS_COMMON (set $(EXTRA_LIBS) instead)
#   LINTFLAGS     (set $(OTHER_LINTFLAGS) instead)


# define these to avoid picking up ones from alaises or from
# non-standard locations
#

ADB            = $(UNIXCOMMAND_PATH)adb
AR             = $(UNIXCCS_PATH)ar
AS             = $(UNIXCCS_PATH)as
BASENAME       = $(UNIXCOMMAND_PATH)basename
CAT            = $(UNIXCOMMAND_PATH)cat
CC             = $(COMPILER_PATH)cc
CPP            = $(COMPILER_PATH)cc -E
CXX            = $(COMPILER_PATH)CC
CD             = cd # intrinsic unix command
CHMOD          = $(UNIXCOMMAND_PATH)chmod
COMPRESS       = $(UNIXCOMMAND_PATH)compress
CP             = $(UNIXCOMMAND_PATH)cp
CPIO           = $(UNIXCOMMAND_PATH)cpio
CUT            = $(UNIXCOMMAND_PATH)cut
DATE           = $(UNIXCOMMAND_PATH)date
DF             = $(UNIXCOMMAND_PATH)df
DIFF           = $(UNIXCOMMAND_PATH)diff
DIRNAME        = $(UNIXCOMMAND_PATH)dirname
ECHO           = $(UNIXCOMMAND_PATH)echo
EGREP          = $(UNIXCOMMAND_PATH)egrep
EXPR           = $(UNIXCOMMAND_PATH)expr
FIND           = $(UNIXCOMMAND_PATH)find
GREP           = $(UNIXCOMMAND_PATH)grep
HEAD           = $(UNIXCOMMAND_PATH)head
ISAINFO        = $(UNIXCOMMAND_PATH)isainfo
KSH	       = $(UNIXCOMMAND_PATH)ksh
LEX            = $(UNIXCCS_PATH)lex
LN             = $(UNIXCOMMAND_PATH)ln
LS             = $(UNIXCOMMAND_PATH)ls
M4             = $(UNIXCCS_PATH)m4
MCS            = $(UNIXCCS_PATH)mcs
MKDIR          = $(UNIXCOMMAND_PATH)mkdir
MV             = $(UNIXCOMMAND_PATH)mv
NAWK           = $(UNIXCOMMAND_PATH)nawk
PKGMK	       = $(UNIXCOMMAND_PATH)pkgmk
PWD            = $(UNIXCOMMAND_PATH)pwd
RC             = $(UNIXCOMMAND_PATH)rc
#RM   is defined by GNU Make as 'rm -f'
RMDIR          = $(UNIXCOMMAND_PATH)rmdir
SED            = $(UNIXCOMMAND_PATH)sed
SH             = $(UNIXCOMMAND_PATH)sh
SORT           = $(UNIXCOMMAND_PATH)sort
STRIP          = $(UNIXCCS_PATH)strip
TAR            = $(UNIXCOMMAND_PATH)tar
TEST           = $(UNIXCOMMAND_PATH)test
TOUCH          = $(UNIXCOMMAND_PATH)touch
TR             = $(UNIXCOMMAND_PATH)tr
TRUE           = $(UNIXCOMMAND_PATH)true
UNAME          = $(UNIXCOMMAND_PATH)uname
UNIQ           = $(UNIXCOMMAND_PATH)uniq
UNZIPSFX       = $(DEVTOOLS_PATH)unzipsfx
ZIPEXE         = $(DEVTOOLS_PATH)zip

# setting up SOLARIS_MAKE, using the native make rather
# than gnumake.  Used for SVR4 package creation
SOLARIS_MAKE = $(UNIXCCS_PATH)make 

# Solaris sparc build can be either 32-bit or 64-bit.
# Default to 32, but allow explicit setting to 32 or 64.
#
ifndef ARCH_DATA_MODEL
  ARCH_DATA_MODEL=32
endif

ifeq ($(ARCH_DATA_MODEL), 32)
  archExpr = case "`$(UNAME) -p`" in  \
                i[3-9]86) \
                    $(ECHO) i586 \
                    ;; \
                sparc*)  \
                    $(ECHO) sparc \
                    ;; \
                *) \
                    $(UNAME) -p  \
                    ;; \
        esac
  ARCH        := $(shell $(archExpr) )
else
   ARCH := $(shell $(ISAINFO) -n)
   # ISA_DIR is used to locate sparcv9 specific libraries which are generally
   # in the same general place as other libraries under the ./sparcv9 directory
   ISA_DIR = /sparcv9
endif

# Need to maintain the jre/lib/i386 location for 32-bit Intel
ifeq ($(ARCH), i586)
   ARCH_FAMILY = $(ARCH)
   LIBARCH = i386
else
   ARCH_FAMILY = sparc
   LIBARCH = $(ARCH)
endif



OS_VERSION := $(shell $(UNAME) -r)
OS_NAME = solaris

# UNIXCOMMAND_PATH is the path to where the most common Unix
# commands are installed.
UNIXCOMMAND_PATH = /usr/bin/
# Allow the user to override the default value...
ifdef ALT_UNIXCOMMAND_PATH
# make sure that there is a "/" on the end...
UNIXCOMMAND_PATH = $(subst //,/,$(ALT_UNIXCOMMAND_PATH)/)
endif

# UNIXCCS_PATH is the path to where the less common UNIX commands
# can be found
UNIXCCS_PATH = /usr/ccs/bin/
# Allow the user to override the default value...
ifdef ALT_UNIXCCS_PATH
# make sure that there is a "/" on the end...
UNIXCCS_PATH = $(subst //,/,$(ALT_UNIXCCS_PATH)/)
endif

# COMPILER_PATH is the path to where the compiler and tools 
# are installed.
COMPILER_PATH = /java/devtools/$(ARCH_FAMILY)/SUNWspro/SC6.1/bin/
# Allow the user to override the default value...
ifdef ALT_COMPILER_PATH
COMPILER_PATH = $(subst //,/,$(subst \,/,$(ALT_COMPILER_PATH))/)
endif

# GCC_COMPILER_PATH is the path to where the gcc/g++ compiler and tools 
# are installed.
GCC_COMPILER_PATH = /java/devtools/$(ARCH_FAMILY)/gnucc/bin/
# Allow the user to override the default value...
ifdef ALT_GCC_COMPILER_PATH
GCC_COMPILER_PATH = $(subst //,/,$(subst \,/,$(ALT_GCC_COMPILER_PATH))/)
endif

# DEVTOOLS_PATH is for other tools required for building (such as
# zip, etc.)
DEVTOOLS_PATH = /java/devtools/$(ARCH_FAMILY)/bin/
# Allow the user to override the default value...
ifdef ALT_DEVTOOLS_PATH
DEVTOOLS_PATH = $(subst //,/,$(ALT_DEVTOOLS_PATH)/)
endif

# where is unwanted output to be delivered?
DEV_NULL = /dev/null
export DEV_NULL

CLASSPATH_SEPARATOR = :

ifndef PLATFORM_SRC
# PLATFORM_SRC may be set by .../ext/*/build/.../Defs.gmk
PLATFORM_SRC = $(TOPDIR)/src/solaris
endif # PLATFORM_SRC

# platform specific include files
PLATFORM_INCLUDE  = $(INCLUDEDIR)/$(PLATFORM)

#
# Default BOOTDIR
#
_BOOTDIR = /java/re/j2se/$(PREVIOUS_JDK_VERSION)/archive/fcs/binaries/$(PLATFORM)-$(ARCH_FAMILY)

#
# Default Hotspot dirs
#
_HOTSPOT_SERVER_PATH = /java/re/j2se/$(JDK_VERSION)/promoted/latest/binaries/$(PLATFORM)-$(ARCH)/jre/lib/$(LIBARCH)/server
ifneq ($(ARCH), sparcv9)
_HOTSPOT_CLIENT_PATH = /java/re/j2se/$(JDK_VERSION)/promoted/latest/binaries/$(PLATFORM)-$(ARCH)/jre/lib/$(LIBARCH)/client
endif

# 
# Default Previous jre and jdk bundle path
#
_PREVIOUS_JDK_FILE = j2sdk-$(PREVIOUS_JDK_UNDERSCORE_VERSION)-$(PLATFORM)-$(ARCH).tar
_PREVIOUS_JRE_FILE = j2re-$(PREVIOUS_JDK_UNDERSCORE_VERSION)-$(PLATFORM)-$(ARCH).tar
_PREVIOUS_RELEASE_PATH = /java/re/j2se/$(PREVIOUS_JDK_VERSION)/archive/fcs/bundles/$(PLATFORM)-$(ARCH)
PREVIOUS_JRE_BUNDLE = $(PREVIOUS_RELEASE_PATH)/$(PREVIOUS_JRE_FILE)
PREVIOUS_JDK_BUNDLE = $(PREVIOUS_RELEASE_PATH)/$(PREVIOUS_JDK_FILE)

# suffix used for object file (.o for unix .obj for windows)
OBJECT_SUFFIX = o
# The suffix applied to runtime libraries
LIBRARY_SUFFIX = so
# The suffix applied to link libraries
LIB_SUFFIX     = so
# The suffix applied to the library name for FDLIBM
FDDLIBM_SUFFIX = a
# The suffix applied to executables (.exe for windows, nothing for solaris)
EXE_SUFFIX =
# The suffix applied to scripts (.bat for windows, nothing for unix)
SCRIPT_SUFFIX =
# The prefix applied to library files (lib for solaris, nothing for windows)
LIB_PREFIX = lib
# CC compiler object code output directive flag value
CC_OBJECT_OUTPUT_FLAG = -o #trailing blank required!

#
# Default HPI libraries. Build will build only native unless
# overriden at the make command line. This makes it convenient for
# people doing, say, a pthreads port -- they can create a posix
# directory here, and say "gnumake HPIS=posix" at the top
# level.
#
HPIS = native

#
# Java default optimization (-x04/-O3) etc.  Applies to the VM.
#
ifeq ($(PRODUCT), java)
    _OPT = $(CC_HIGHER_OPT)
else
    _OPT = $(CC_LOWER_OPT)
    CPPFLAGS_DBG    += -DLOGGING -DDBINFO
endif

#
# If -Xa is in CFLAGS_COMMON it will end up ahead of $(POPT) for the
# optimized build, and that ordering of the flags completely freaks
# out cc.  Hence, -Xa is instead in each CFLAGS variant.
#
# The extra options to the C++ compiler prevent it from:
#   - adding runpath (dump -Lv) to *your* C++ compile install dir
#   - adding stubs to various things such as thr_getspecific (hence -nolib)
#   - creating Templates.DB in current directory (arch specific)
#
CFLAGS_COMMON   = -v -xtemp=$(OBJDIR) -L$(OBJDIR) 
DEBUG_OPTION=-g

ifdef	LIBRARY
  CFLAGS_COMMON +=-xstrconst
endif
# Turn off a superfluous compiler error message on Intel
ifeq ($(ARCH), i586)
  CFLAGS_COMMON += -erroff=E_BAD_PRAGMA_PACK_VALUE
endif
# Turn off -g if we are doing tcov build
ifdef TCOV_BUILD
  DEBUG_OPTION=
endif
CFLAGS_OPT      = -Xa $(POPT) -xF
CFLAGS_DBG      = -Xa $(DEBUG_OPTION)
CXXFLAGS_COMMON = -noex -DCC_NOEX -norunpath -nolib -ptr$(OBJDIR)
CXXFLAGS_OPT	= $(POPT) -xF
CXXFLAGS_DBG	= $(DEBUG_OPTION)

ifdef COMPILE_WITH_SB
  ifeq ($(LIBRARY), java)
    CFLAGS_DBG +=   -xsb
  endif
endif

# The -W0,-noglobal tells the compiler to NOT generate mangled global
#    ELF data symbols for file local static data.
#    This can break fix&continue, but we'd rather do the same compilations
#    for deliverable bits as we do for non-deliverable bits
CFLAGS_DBG += -W0,-noglobal

# Set additional compile flags for sparcv9 (64-bit) compilation
ifeq ($(ARCH_DATA_MODEL), 64)
  CFLAGS_COMMON   += -xarch=v9
  CXXFLAGS_COMMON += -xarch=v9
  ASFLAGS_COMMON  += -xarch=v9
  EXTRA_LIBS      += -xarch=v9
endif

# The Solaris 9 CBE (Common Build Environment) requires that the use
# of appl registers be disabled when compiling a public library (or
# a library that's loaded by a public library) on sparc.
#
ifeq ($(ARCH_FAMILY), sparc)
  ifdef LIBRARY
    CFLAGS_NO_APPL   = -xregs=no%appl
    CFLAGS_COMMON   += $(CFLAGS_NO_APPL)
    CXXFLAGS_COMMON += $(CFLAGS_NO_APPL)
  endif
endif

#
# uncomment the following to build with PERTURBALOT set
#
# OTHER_CFLAGS += -DPERTURBALOT
#

CPPFLAGS_COMMON = -D$(ARCH_FAMILY) -DSOLARIS2 -D__solaris__ -D_REENTRANT 
CPPFLAGS_OPT    = 
CPPFLAGS_DBG    = -DDEBUG

ifeq ($(ARCH), i586)
  CPPFLAGS_COMMON +=  -DcpuIntel -D_LITTLE_ENDIAN -Di386
endif

# Java memory management is based on memory mapping by default, but a
# system only assuming malloc/free can be built by adding -DUSE_MALLOC 

CPPFLAGS_OPT	+= -DTRIMMED -DMACRO_MEMSYS_OPS -DBREAKPTS -DTRACING
CPPFLAGS_DBG	+= -DTRACING -DMACRO_MEMSYS_OPS -DBREAKPTS

ifneq ($(LIBRARY),JdbcOdbc)
  ifneq ($(PARTIAL_GPROF), true)
    LDFLAGS_COMMON  = -z defs
  endif
endif

#
# -L paths for finding and -ljava
#
LDFLAGS_COMMON += -L$(LIBDIR)/$(LIBARCH)
LDFLAGS_OPT     =
LDFLAGS_DBG     =

# javac Boot Flags
JAVAC_BOOT_FLAGS = -J-Xmx128m 

#
# We never really want the incremental linker, ever
#    The -xildoff option tells Sun's compilers to NOT use incremental linker
#
LDFLAGS_COMMON  += -xildoff

ifdef LIBRARY
  LDFLAGS_COMMON	+= -R\$$ORIGIN
endif

EXTRA_LIBS += -lc

# Postprocessing
#
ifeq ($(VARIANT), OPT)
  ifeq ($(PARTIAL_GPROF), true)
    NO_STRIP = true
  endif
  ifeq ($(GPROF), true)
    NO_STRIP = true
  endif
  ifneq ($(NO_STRIP), true)
      PROCESS_STRIP=	$(STRIP) $@ ;
  endif
endif
PROCESS_COMMENT=$(MCS) -d -a "$(FULL_VERSION)" $@ ;
POST_PROCESS=	$(PROCESS_COMMENT) $(PROCESS_STRIP)


#
# Sun C compiler will take -M and pass it on to ld.
# Usage: ld $(LD_MAPFILE_FLAG) mapfile *.o
#
ifeq ($(CC_VERSION),gcc)
LD_MAPFILE_FLAG = -Xlinker -M -Xlinker
else
LD_MAPFILE_FLAG = -M
endif

#
# Variables globally settable from the make command line (default
# values in brackets):
#	GPROF (false)
# Eg: 	% gnumake GPROF=true
GPROF = false
ifeq ($(GPROF), true)
    CFLAGS_COMMON += -DGPROF -xpg
    EXTRA_LIBS += -xpg
endif

# PARTIAL_GPROF is to be used ONLY during compilation - it should not
# appear during linking of libraries or programs.  It also should
# prevent linking with -z defs to allow a symbol to remain undefined.
#
PARTIAL_GPROF = false
ifeq ($(PARTIAL_GPROF), true)
    CFLAGS_GPROF += -xpg
endif

#
# For a TCOV build we add in the TCOV_OPTION
#
ifdef TCOV_BUILD
  TCOV_OPTION		= -xprofile=tcov
  LDFLAGS_COMMON 	+= $(TCOV_OPTION) -Kpic
  CFLAGS_COMMON  	+= $(TCOV_OPTION)
  CXXFLAGS_COMMON 	+= $(TCOV_OPTION)
  EXTRA_LIBS 	+= $(TCOV_OPTION)
  LDNOMAP=true
endif

#
# Solaris only uses native threads. 
#
THREADS_FLAG=	native
THREADS_DIR=	threads

# Architecture specific additional optimization flags
ifeq ($(ARCH), sparc)
    # On sparc 
    #	-xcg92 = assume v8 (v7 systems will run slower with -xcg92)
    #		.div/.mul will be instructions not calls
    # -dalign = assumes double/long alignments 
    #			1/12/1999: causes SIGBUS when javac compiles up 
    #					JDK classes, unknown reason. -kto
    _OPT_sparc = -xcg92
endif

#
# This is added because the DevPro compilers come with their own version
# of libm.a, which will get used by default when using their compilers. We
# dont really want that version, particularly in shared libraries, since
# it seems to add about 60k.  And also causes a problem with 2.5.1 and the
# stupid libmp.so library, that also has a pow(). If the linker manages
# to find a libm.a (in the compiler area) without seeing a libm.so, then
# libm.so is NOT added as a required shared library, and pow() comes from
# libmp.so (on 2.5.1 only) which will die with a SEGV because it's NOT the
# standard libm pow() interface (it's pass by ref args). Unfortunately
# libnsl.so on 2.5.1 needs this bogus pow(), but we don't want it, and
# libnsl.so only needed it for one kind of encryption, which apparently
# isn't used. So this forcing in of libm.so may cause this libnsl.so
# bug to surface on 2.5.1 someday (libnsl.so 2.6/7 were fixed).
#
# Bottom line: Always use libm.so.1 from /usr/lib. By providing a
#   hard path to libm.so instead of -lm, the linker will just add libm.so on
#   the library dependency list, and never get libm.a, as we need to happen.

LIBM=/usr/lib$(ISA_DIR)/libm.so

# It's possible that you'd actually like to
# have the DevPro directories in your path.  If it needs to be added later
# it should be put at the end of the path below or added using -L
#

ifndef CPLUSPLUSLIBRARY
ifndef MIXEDCPLUSPLUSLIBRARY
endif
endif

#
# Support for Quantify.
#
ifdef QUANTIFY
  QUANTIFY_CMD = quantify
  QUANTIFY_OPTIONS = -cache-dir=/tmp/quantify -always-use-cache-dir=yes
  LINK_PRE_CMD = $(QUANTIFY_CMD) $(QUANTIFY_OPTIONS)
  ifdef LIBRARY
    CFLAGS_COMMON += -K PIC
  endif
endif

#
# Support for Purify.
#
ifdef PURIFY
  PURIFY_CMD = /net/suntools.eng/export/tools/sparc/bin/purify
  PURIFY_OPTIONS = -cache-dir=/tmp/quantify -always-use-cache-dir=yes
  LINK_PRE_CMD = $(PURIFY_CMD) $(PURIFY_OPTIONS)
  ifdef LIBRARY
    CFLAGS_COMMON += -K PIC
  endif
endif


#
# Different "levels" of optimization.
#
CC_HIGHER_OPT = -xO4
CC_LOWER_OPT  = -xO2
CC_HIGHER_OPT += $(_OPT_$(ARCH))
CC_LOWER_OPT  += $(_OPT_$(ARCH))


#
# Path and option to link against the VM, if you have to.  Note that
# there are libraries that link against only -ljava, but they do get
# -L to the -ljvm, this is because -ljava depends on -ljvm, whereas
# the library itself should not.
#
VM_NAME         = server
JVMLIB          = -L$(LIBDIR)/$(LIBARCH)/$(VM_NAME) -ljvm$(SUFFIX)
JAVALIB         = -ljava$(SUFFIX) $(JVMLIB)

CC_DEPEND	 = -xM1
CC_DEPEND_FILTER = $(SED) -e '/:[ 	]*[/]/d' -e 's!$*\.o!$(dir $@)&!g' | $(SORT) -u

OPENWIN_HOME    = /usr/openwin
OPENWIN_LIB     = $(OPENWIN_HOME)/lib$(ISA_DIR)

# runtime graphics library search paths...
OPENWIN_RUNTIME_LIB = /usr/openwin/lib$(ISA_DIR)
AWT_RUNPATH = -R/usr/dt/lib$(ISA_DIR) -R$(OPENWIN_RUNTIME_LIB)

# Used instead of libC this guarantees use of the .so and not the .a
#    This does exactly what you want and is safer than -lC (see comments
#    on libm.so in this file)
LIBCXX = /usr/lib$(ISA_DIR)/libC.so.5
# On i586 we need to tell the code generator to ALWAYS use a
#   frame pointer. Not in _OPT_i586 because we HAVE to have this mode!
ifeq ($(ARCH), i586)
  CXXFLAGS_OPT += -Qoption codegen -on,USE_FRAME_POINTER
  CFLAGS_OPT += -Wc,-on,USE_FRAME_POINTER
endif

# If the version of the compiler is 5.x, we need to add -compat=4 so we
#    get the old abi and the old behavior 
# NOTE: C++ compat 5 mode is the new C++ ABI 
# NOTE: compat=5 is the default in SC5.0
# NOTE: compat=5 is necessary for v9!!!!
# NOTE: compat=5 uses libCsun.so.1, NOT libC.so.5
# NOTE: Set CXX_COMPAT=5 and use SC5.0 compilers to get new C++ ABI build
CXX_COMPAT=5
LIBCXX = /usr/lib$(ISA_DIR)/libCrun.so.1

# Suppress the C compiler warnings about non-constant initializers
#   this happens way too much in this source base. Only the SC5.0
#   compilers seemed to print this warning error.
CFLAGS_COMMON += -erroff=E_NON_CONST_INIT

ifeq ($(ARCH_FAMILY), sparc)
  # Use save instructions instead of add instructions
  #    This was an optimization in SC5.0 that made it hard for us to
  #    find the "save" instruction (which got turned into an "add"
  CXXFLAGS_OPT += -Qoption cg -Qrm-s
  CFLAGS_OPT += -Wc,-Qrm-s

  # Don't allow tail call code generation. Only SC5.0.
  # We don't like code of this form:
  #	save
  #	<code>
  #	call foo
  #	   restore
  # because we can't tell if the method will have a stack frame
  # and register windows or not.
  CXXFLAGS_OPT += -Qoption cg -Qiselect-T0
  CFLAGS_OPT += -Wc,-Qiselect-T0
endif

# GLOBAL_KPIC: If set means all libraries are PIC. (SC5.0 only)
#    EXCEPT for select compiles
#    If a .o file is compiled non-PIC then it should be forced
#	   into the RW data segment with a mapfile option. This is done
#    with object files which generated from .s files.
#    The -ztext enforces that no relocations remain in the text segment
#    so that it remains purely read-only for optimum system performance.
#    Some libraries are (and can be) -Kpic instead of -KPIC, and will
#	   override GLOBAL_KPIC appropriately.
#
#    NOTE: x86 has some bugs related to mixing PIC and non-PIC .o and
#	       getting the -ztext to not complain. It has to do with .rodata
#	       having relocation records in it, so you would need to push
#	       .rodata to the .data section on x86 to fix this, or remove
#          -ztext and not have x86 text segment pure read-only. :^(
#		Bug #4233392
#
#    NOTE: Only force global PIC with debug versions for now
#
#    NOTE: x86 -g -KPIC has some bugs too, so don't use -KPIC on
#		x86 at all... Filed bug on yabe on this one. #4233368
#
ifndef TCOV_BUILD
  ifeq ($(VARIANT),DBG)
    GLOBAL_KPIC = -KPIC
    # Bug in yabe may not allow -KPIC on x86 in the -g version
    ifeq ($(ARCH), i586)
      GLOBAL_KPIC =
    endif
  else
    # Uncomment the following line to force the OPT version to be PIC
    #     spec on i586 with PIC gets 5% loss, sparc seems unharmed
    GLOBAL_KPIC = -KPIC
  endif
  # Add in GLOBAL_KPIC option
  CXXFLAGS_COMMON += $(GLOBAL_KPIC)
  CFLAGS_COMMON += $(GLOBAL_KPIC)
  # PIC (if used) means we need -ztext ld option
  ifdef GLOBAL_KPIC
    LDFLAGS_COMMON  += -ztext
  endif
endif # TCOV_BUILD

# If your platform has DPS, it will have Type1 fonts too, in which case
# it is best to enable DPS support until such time as 2D's rasteriser
# can fully handle Type1 fonts in all cases. Default is "yes".
# HAVE_DPS should only be "no" if the platform has no DPS headers or libs
# DPS (Displayable PostScript) is available on Solaris machines

HAVE_DPS = yes

#
# Default Motif directory. Set MOTIF_DIR to ALT_MOTIF_DIR if set.
# ALT_MOTIF_DIR must point to a directory containing motif12 and 
# and motif21 directories which in turn contain the Xm and include
# directories for the appropriate version of motif.
#
# MOTIF_VERSION_STRING is set by make/sun/motif12/Makefile and 
# make/sun/motif21/Makefile
#

MOTIF_DIR=/java/devtools/$(ARCH_FAMILY)/motif$(MOTIF_VERSION_STRING)
ifdef ALT_MOTIF_DIR
  MOTIF_DIR=$(ALT_MOTIF_DIR)/motif$(MOTIF_VERSION_STRING)
endif
MOTIF_LIB = $(MOTIF_DIR)/lib$(ISA_DIR)

BUILD_MOTIF21 = true;

# Always build headless on Solaris
BUILD_HEADLESS = true

#
# The ODBC Driver Manager libs
#
ODBCDIR = /java/devtools/$(ARCH_FAMILY)/jdbc-odbc/
ifdef ALT_ODBCDIR
  ODBCDIR = $(ALT_ODBCDIR)
endif

#
# Japanese manpages
#
JA_SOURCE_ENCODING = eucJP
JA_TARGET_ENCODINGS = eucJP UTF-8 PCK

