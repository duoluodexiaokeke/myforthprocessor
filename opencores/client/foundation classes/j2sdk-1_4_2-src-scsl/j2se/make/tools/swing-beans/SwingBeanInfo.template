/*
 * @(BeanClassName)BeanInfo.java
 *
 * @(#)SwingBeanInfo.template	1.9 99/08/06
 *
 * Copyright 1999 by Sun Microsystems, Inc.,
 * 901 San Antonio Road, Palo Alto, California, 94303, U.S.A.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Sun Microsystems, Inc. ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Sun.
 */

package @(BeanPackageName);

import javax.swing.beaninfo.SwingBeanInfo;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.awt.Image;


/**
 * Descriptive information about the @(BeanClassName) class for Java 
 * Beans application builders.  This BeanInfo class provides descriptions
 * of each property, of the bean itself, it indicates which
 * @(BeanClassName) properties are bound, and it provides other
 * information and icons useful to builders.
 * 
 * @version 1.9 08/06/99
 * @author Auto-Generated Source Code
 */

public class @(BeanClassName)BeanInfo extends SwingBeanInfo {
    private static final Class class@(BeanClassName) = @(BeanClassObject);

    /**
     * @return a @(BeanClassName) BeanDescriptor
     */
    public BeanDescriptor getBeanDescriptor() {
        return createBeanDescriptor(class@(BeanClassName), new Object[] {
                PREFERRED, Boolean.TRUE,
                @(ClassDescriptors)
                    SHORTDESCRIPTION, "@(BeanDescription)"
        });
    }


    /**
     * Create a @(BeanClassName) PropertyDescriptor.  This is just an internal
     * convenience method that allows one to leave the @(BeanClassName).class
     * argument out of the createPropertyDescriptor() class in the 
     * getPropertyDescriptors() method below.
     * 
     * @param name the name of the property
     * @param args an array java.beans.PropertyDescriptor property names and values
     * @return a @(BeanClassName) PropertyDescriptor.
     * @see SwingBeanInfo#createPropertyDescriptor
     */
    private PropertyDescriptor createPropertyDescriptor(String name, Object[] args) {
        return super.createPropertyDescriptor(class@(BeanClassName), name, args);
    }


    /**
     * This method returns a list of bean PropertyDescriptors, one for each public
     * property in @(BeanClassName).  The first property is the "default" property.
     *
     * @return a complete list of bean PropertyDescriptors for @(BeanClassName)
     * @see SwingBeanInfo
     * @see java.beans.BeanInfo#getDefaultPropertyIndex
     */
    public PropertyDescriptor[] getPropertyDescriptors() {
        @(EnumVariables)
        return new PropertyDescriptor[] {
            @(BeanPropertyDescriptors)
        };
    }


    /**
     * @return an icon of the specified kind for @(BeanClassName)
     */
    public Image getIcon(int kind) {
        Image i;
        switch (kind){
            case ICON_COLOR_32x32:
                i = loadImage("beaninfo/images/@(BeanClassName)Color32.gif");
                return ((i == null) ? loadImage("beaninfo/images/JComponentColor32.gif") : i);
            case ICON_COLOR_16x16:
                i = loadImage("beaninfo/images/@(BeanClassName)Color16.gif");
                return ((i == null) ? loadImage("beaninfo/images/JComponentColor16.gif") : i);
            case ICON_MONO_32x32:
                i = loadImage("beaninfo/images/@(BeanClassName)Mono32.gif");
                return ((i == null) ? loadImage("beaninfo/images/JComponentMono32.gif") : i);		  
            case ICON_MONO_16x16:
                i = loadImage("beaninfo/images/@(BeanClassName)Mono16.gif");
                return ((i == null) ? loadImage("beaninfo/images/JComponentMono16.gif") : i);		  
            default:
                return super.getIcon(kind);
        }
    }
}


