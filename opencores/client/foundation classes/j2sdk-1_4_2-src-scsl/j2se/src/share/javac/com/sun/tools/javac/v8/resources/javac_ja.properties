#
# @(#)javac_ja.properties	1.10 03/01/06
#
# Copyright 1999-2002 Sun Microsystems, Inc. All Rights Reserved.
#
# This software is the proprietary information of Sun Microsystems, Inc.
# Use is subject to license terms.
#

## standard options

javac.opt.g=\
    \u3059\u3079\u3066\u306e\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u751f\u6210\u3059\u308b
#    Generate all debugging info
javac.opt.g.none=\
    \u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u751f\u6210\u3057\u306a\u3044
#    Generate no debugging info
javac.opt.g.lines.vars.source=\
    \u3044\u304f\u3064\u304b\u306e\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3060\u3051\u3092\u751f\u6210\u3059\u308b
#    Generate only some debugging info
javac.opt.nowarn=\
    \u8b66\u544a\u3092\u767a\u751f\u3055\u305b\u306a\u3044
#    Generate no warnings
javac.opt.verbose=\
    \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3059\u308b
#    Output messages about what the compiler is doing
javac.opt.deprecation=\
    \u63a8\u5968\u3055\u308c\u306a\u3044 API \u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30bd\u30fc\u30b9\u306e\u4f4d\u7f6e\u3092\u51fa\u529b\u3059\u308b
#    Output source locations where deprecated APIs are used
javac.opt.classpath=\
    \u30e6\u30fc\u30b6\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3059\u308b\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b
#    Specify where to find user class files
javac.opt.sourcepath=\
    \u5165\u529b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3059\u308b\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b
#    Specify where to find input source files
javac.opt.bootclasspath=\
    \u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u4f4d\u7f6e\u3092\u7f6e\u304d\u63db\u3048\u308b
#    Override location of bootstrap class files
javac.opt.extdirs=\
    \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u62e1\u5f35\u6a5f\u80fd\u306e\u4f4d\u7f6e\u3092\u7f6e\u304d\u63db\u3048\u308b
#    Override location of installed extensions
javac.opt.d=\
    \u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3059\u308b\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b
#    Specify where to place generated class files
javac.opt.encoding=\
    \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u4f7f\u7528\u3059\u308b\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u6307\u5b9a\u3059\u308b
#    Specify character encoding used by source files
javac.opt.target=\
    \u7279\u5b9a\u306e VM \u30d0\u30fc\u30b8\u30e7\u30f3\u7528\u306e\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b
#    Generate class files for specific VM version
javac.opt.source=\
    \u6307\u5b9a\u3055\u308c\u305f\u30ea\u30ea\u30fc\u30b9\u3068\u30bd\u30fc\u30b9\u306e\u4e92\u63db\u6027\u3092\u4fdd\u3064
#    Provide source compatibility with specified release
javac.opt.arg.path=\
    <path>
javac.opt.arg.dirs=\
    <dirs>
javac.opt.arg.directory=\
    <directory>
javac.opt.arg.encoding=\
    <encoding>
javac.opt.arg.release=\
    <release>
javac.opt.arg.number=\
    <number>

## extended options

javac.opt.maxerrs=\
    \u51fa\u529b\u3059\u308b\u30a8\u30e9\u30fc\u306e\u6700\u5927\u6570\u3092\u8a2d\u5b9a\u3059\u308b
#    Set the maximum number of errors to print
javac.opt.maxwarns=\
    \u51fa\u529b\u3059\u308b\u8b66\u544a\u306e\u6700\u5927\u6570\u3092\u8a2d\u5b9a\u3059\u308b
#    Set the maximum number of warnings to print
javac.opt.nogj=\
    \u8a00\u8a9e\u306e\u6c4e\u7528\u6027\u3092\u53d7\u3051\u4ed8\u3051\u306a\u3044
#    Don't accept generics in the language
javac.opt.moreinfo=\
    \u578b\u5909\u6570\u306e\u62e1\u5f35\u60c5\u5831\u3092\u51fa\u529b\u3059\u308b
#    Print extended information for type variables
javac.opt.printflat=\
    \u5185\u90e8\u30af\u30e9\u30b9\u306e\u5909\u63db\u5f8c\u306b\u62bd\u8c61\u69cb\u6587\u30c4\u30ea\u30fc\u3092\u51fa\u529b\u3059\u308b
#    Print abstract syntax tree after inner class conversion
javac.opt.printsearch=\
    \u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u691c\u7d22\u4f4d\u7f6e\u60c5\u5831\u3092\u51fa\u529b\u3059\u308b
#    Print information where classfiles are searched
javac.opt.prompt=\
    \u5404\u30a8\u30e9\u30fc\u3067\u505c\u6b62\u3059\u308b
#    Stop after each error
javac.opt.retrofit=\
    \u65e2\u5b58\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u6c4e\u7528\u578b\u3067\u7d44\u307f\u66ff\u3048\u308b
#    Retrofit existing classfiles with generic types
javac.opt.s=\
    \u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u4ee3\u308f\u308a\u306b java \u30bd\u30fc\u30b9\u3092\u767a\u884c\u3059\u308b
#    Emit java sources instead of classfiles
javac.opt.scramble=\
    \u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306e private \u8b58\u5225\u5b50\u306b\u30b9\u30af\u30e9\u30f3\u30d6\u30eb\u3092\u304b\u3051\u308b
#    Scramble private identifiers in bytecode
javac.opt.scrambleall=\
    \u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306e package \u53ef\u8996\u8b58\u5225\u5b50\u306b\u30b9\u30af\u30e9\u30f3\u30d6\u30eb\u3092\u304b\u3051\u308b
#    Scramble package visible identifiers in bytecode
javac.opt.switchcheck=\
    \u30b9\u30a4\u30c3\u30c1\u306e\u6b20\u843d\u3092\u8b66\u544a\u3059\u308b
#    Warn about fall-through in switches
javac.opt.warnunchecked=\
    \u672a\u78ba\u8a8d\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u30bd\u30fc\u30b9\u306e\u4f4d\u7f6e\u3092\u51fa\u529b\u3059\u308b
#    Output source locations where unchecked operations are used
javac.opt.version=\
    \u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831
#    Version information
javac.opt.arg.pathname=\
    <pathname>
javac.opt.arg.file=\
    <filename>
javac.opt.Xbootclasspath.p=\
    \u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30af\u30e9\u30b9\u30d1\u30b9\u306e\u5148\u982d\u306b\u4ed8\u52a0\u3059\u308b
#    Prepend to the bootstrap classpath
javac.opt.Xstdout=\
    \u6a19\u6e96\u51fa\u529b\u3092\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b
#    Redirect standard output
javac.opt.X=\
    \u975e\u6a19\u6e96\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6982\u8981\u3092\u51fa\u529b\u3059\u308b
#    Print a synopsis of nonstandard options
javac.opt.help=\
    \u6a19\u6e96\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6982\u8981\u3092\u51fa\u529b\u3059\u308b
#    Print a synopsis of standard options

## errors

javac.err.invalid.arg=\
    {0} \u306f\u7121\u52b9\u306a\u5f15\u6570\u3067\u3059\u3002
#    invalid argument: {0}
javac.err.invalid.flag=\
    {0} \u306f\u7121\u52b9\u306a\u30d5\u30e9\u30b0\u3067\u3059\u3002
#    invalid flag: {0}
javac.err.invalid.target=\
    {0} \u306f\u7121\u52b9\u306a VM \u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002
#    invalid target release: {0}
javac.err.no.source.files=\
    \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u305b\u3093\u3002
#    no source files
javac.err.req.arg=\
    {0} \u306b\u306f\u5f15\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002
#    {0} requires argument
javac.err.invalid.source=\
    {0} \u306f\u7121\u52b9\u306a\u30bd\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002
#    invalid source release: {0}
javac.err.error.writing.file=\
    {0} \u306e\u66f8\u304d\u8fbc\u307f\u30a8\u30e9\u30fc\u3067\u3059\u3002{1}
#    error writing {0}; {1}
javac.err.source.target.conflict=\
    \u30ea\u30ea\u30fc\u30b9 1.4 \u306e\u30bd\u30fc\u30b9\u306b\u306f\u30ea\u30ea\u30fc\u30b9 1.4 \u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002
#    source release 1.4 requires target release 1.4
javac.err.file.not.found=\
    \u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093: {0}
#    file not found: {0}
## messages

javac.msg.usage.header=\
\u4f7f\u3044\u65b9: {0} <options> <source files>\n\
\u4f7f\u7528\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002
#
#Usage: {0} <options> <source files>\n\
#where possible options include:
	
javac.msg.usage.nonstandard.footer=\
\u3053\u308c\u3089\u306f\u975e\u6a19\u6e96\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3042\u308a\u4e88\u544a\u306a\u3057\u306b\u5909\u66f4\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002
#These options are non-standard and subject to change without notice.
	
javac.msg.bug=\
\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002({0}) \
Bug Parade \u3067\u540c\u3058\u30d0\u30b0\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u3054\u78ba\u8a8d\u306e\u4e0a\u3001\
\u5b9f\u884c\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u4ee5\u4e0b\u306b\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u8a3a\u65ad\u60c5\u5831\u3092\u542b\u3081\u3001\
Java Developer Connection (http://java.sun.com/cgi-bin/bugreport.cgi) \u306b\
\u304a\u3044\u3066\u30d0\u30b0\u306e\u767b\u9332\u3092\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\u3054\u5354\u529b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002
#
#An exception has occurred in the compiler ({0}). \
#Please file a bug at the Java Developer Connection (http://java.sun.com/cgi-bin/bugreport.cgi)  \
#after checking the Bug Parade for duplicates. \
#Include your program and the following diagnostic in your report.  Thank you.

javac.msg.io=\
\n\n\u5165\u51fa\u529b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\n\
\u8a73\u7d30\u306f\u6b21\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3067\u8abf\u67fb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n
#
#\n\nAn input/output error occurred.\n\
#Consult the following stack trace for details.\n

javac.msg.resource=\
\n\n\u30b7\u30b9\u30c6\u30e0\u30ea\u30bd\u30fc\u30b9\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\u3002\n\
\u8a73\u7d30\u306f\u6b21\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3067\u8abf\u67fb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n
#
#\n\nThe system is out of resources.\n\
#Consult the following stack trace for details.\n
